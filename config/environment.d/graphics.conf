# Graphics Environment Configuration
# Fixes rendering artifacts in GTK4 applications like Thunar

# Fix GTK4 artifacts without breaking hardware acceleration
# Use the older, stable GL renderer instead of the new NGL renderer
export GSK_RENDERER=gl

# AMD-specific fixes for persistent rendering artifacts
# Detected GPU type determines which additional fixes are applied

# Get GPU vendor information
GPU_VENDOR=$(lspci | grep -i vga | head -1)

# AMD-specific progressive fallback system
if echo "$GPU_VENDOR" | grep -qi "amd\|radeon"; then
    # AMD systems: Try Mesa threading optimization first
    export mesa_glthread=true

    # AMD Mesa driver optimizations
    export MESA_GL_VERSION_OVERRIDE=4.6
    export MESA_GLSL_VERSION_OVERRIDE=460

    # If artifacts persist, uncomment the next line (nuclear option)
    # This disables hardware acceleration but fixes all rendering issues
    export LIBGL_ALWAYS_SOFTWARE=1

    # AMD-specific Cairo fallback for severe cases
    # Uncomment if GL renderer still shows artifacts:
    # export GSK_RENDERER=cairo
fi

# Intel-specific optimizations (maintain existing behavior)
if echo "$GPU_VENDOR" | grep -qi "intel"; then
    # Intel systems work well with GL renderer
    # Keep hardware acceleration enabled
    export GSK_RENDERER=gl
fi

# NVIDIA-specific handling
if echo "$GPU_VENDOR" | grep -qi "nvidia"; then
    # NVIDIA systems: Force GL renderer for stability
    export GSK_RENDERER=gl

    # NVIDIA-specific optimizations
    export __GL_THREADED_OPTIMIZATIONS=1
fi

# Note: Progressive fallback order for AMD artifacts:
# 1. GSK_RENDERER=gl (applied globally above)
# 2. mesa_glthread=true (AMD performance boost)
# 3. Mesa version overrides (AMD compatibility)
# 4. GSK_RENDERER=cairo (if GL still has artifacts)
# 5. LIBGL_ALWAYS_SOFTWARE=1 (nuclear option - disables all HW accel)

# Debugging: To test which renderer is active:
# echo $GSK_RENDERER
# glxinfo | grep "OpenGL renderer"
