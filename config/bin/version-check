#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import urllib.request
import urllib.error
from datetime import datetime, timezone
import re
import os

# GTK imports for direct dialog integration
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gtk, Gdk, GLib, Pango

class UpdateDialog:
    def __init__(self, local_version, remote_version, commit_messages=None, disable_timeout=False):
        self.local_version = local_version
        self.remote_version = remote_version
        self.commit_messages = commit_messages or []
        self.disable_timeout = disable_timeout
        self.home_dir = os.path.expanduser('~')
        self.config_dir = os.path.join(self.home_dir, '.config', 'archriot')
        self.config_file = os.path.join(self.config_dir, 'versions.cfg')
        self.lock_file = "/tmp/archriot_upgrade.lock"
        self.user_interacted = False  # Track if user actually interacted with dialog
        self.dialog_timeout_id = None  # Track timeout for visibility check

        # Create lock file
        self.create_lock_file()

        self.window = Gtk.Window()
        self.window.set_title("ArchRiot Update Available")
        self.window.set_default_size(500, 350)
        self.window.set_position(Gtk.WindowPosition.CENTER)
        self.window.set_resizable(False)

        # Make window modal and keep above
        self.window.set_modal(True)
        self.window.set_keep_above(True)
        self.window.set_type_hint(Gdk.WindowTypeHint.DIALOG)

        # Force window to be urgent and demand attention
        self.window.set_urgency_hint(True)
        self.window.present()

        # Create main container
        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=20)
        main_box.set_margin_start(40)
        main_box.set_margin_end(40)
        main_box.set_margin_top(30)
        main_box.set_margin_bottom(30)

        # Add title
        self.add_title(main_box)

        # Add version information
        self.add_version_info(main_box)

        # Add update instructions
        self.add_instructions(main_box)

        # Add buttons
        self.add_buttons(main_box)

        self.window.add(main_box)
        self.window.connect("destroy", self.on_window_destroy)

        # Set up CSS for styling (same as original dialog)
        self.setup_styling()

        self.window.show_all()

        # Log dialog creation for debugging
        self.log_dialog_state(f"Dialog created for update {local_version} -> {remote_version}")

        # Set up timeout to check if dialog is actually visible to user
        # Skip timeout if explicitly disabled (for GUI mode)
        if not self.disable_timeout:
            # If no interaction after 5 minutes, send fallback notification
            self.dialog_timeout_id = GLib.timeout_add_seconds(300, self.on_dialog_timeout)
        else:
            self.dialog_timeout_id = None
            self.log_dialog_state("Timeout disabled for explicit GUI mode")

    def create_lock_file(self):
        """Create lock file with PID and cleanup handling"""
        try:
            # Clean up stale lock files
            if os.path.exists(self.lock_file):
                with open(self.lock_file, 'r') as f:
                    old_pid = f.read().strip()

                if not os.path.exists(f"/proc/{old_pid}"):
                    os.remove(self.lock_file)

            # Create new lock file
            with open(self.lock_file, 'w') as f:
                f.write(str(os.getpid()))

        except Exception as e:
            print(f"Warning: Could not create lock file: {e}")

    def cleanup_lock_file(self):
        """Clean up lock file on exit"""
        try:
            if os.path.exists(self.lock_file):
                os.remove(self.lock_file)
        except Exception:
            pass

    def clear_waybar_state(self):
        """Clear waybar update state files"""
        try:
            update_flag_file = os.path.join(self.config_dir, 'update_available')
            update_state_file = os.path.join(self.config_dir, 'update_state')

            if os.path.exists(update_flag_file):
                os.remove(update_flag_file)
            if os.path.exists(update_state_file):
                os.remove(update_state_file)
        except Exception as e:
            print(f"Warning: Could not clear waybar state: {e}")

    def add_title(self, container):
        """Add main title"""
        title_label = Gtk.Label()
        title_label.set_markup('<span size="24000" weight="bold">◆ Update Available ◆</span>')
        title_label.set_halign(Gtk.Align.CENTER)
        title_label.set_margin_bottom(10)
        container.pack_start(title_label, False, False, 0)

    def add_version_info(self, container):
        """Add version comparison information"""
        version_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        version_box.set_halign(Gtk.Align.CENTER)

        version_label = Gtk.Label()
        version_label.set_markup(f'<span size="14000">Update: <b>{self.local_version}</b> → <b><span foreground="#89b4fa">v{self.remote_version}</span></b></span>')
        version_label.set_halign(Gtk.Align.CENTER)
        version_box.pack_start(version_label, False, False, 0)

        container.pack_start(version_box, False, False, 0)

    def add_instructions(self, container):
        """Add update instructions with dynamic commit messages"""
        instructions_label = Gtk.Label()

        # Build dynamic content based on commit messages
        if self.commit_messages:
            # Format commit messages with proper hanging indentation
            formatted_messages = []
            for msg in self.commit_messages[:8]:
                # Handle multi-line commit messages properly
                msg_lines = msg.split('\n')
                formatted_msg_lines = []

                for i, line in enumerate(msg_lines):
                    if i == 0:
                        # First line gets bullet point
                        if len(line) > 50:
                            words = line.split()
                            lines = []
                            current_line = "• " + words[0]
                            for word in words[1:]:
                                if len(current_line + " " + word) <= 50:
                                    current_line += " " + word
                                else:
                                    lines.append(current_line)
                                    current_line = "  " + word  # 2 spaces for hanging indent
                            lines.append(current_line)
                            formatted_msg_lines.extend(lines)
                        else:
                            formatted_msg_lines.append(f"• {line}")
                    else:
                        # Subsequent lines get hanging indent with word wrapping
                        if len(line) > 44:  # Account for 6-space indent
                            words = line.split()
                            lines = []
                            current_line = "  " + words[0]
                            for word in words[1:]:
                                if len(current_line + " " + word) <= 50:
                                    current_line += " " + word
                                else:
                                    lines.append(current_line)
                                    current_line = "  " + word  # 2 spaces for hanging indent
                            lines.append(current_line)
                            formatted_msg_lines.extend(lines)
                        else:
                            formatted_msg_lines.append(f"  {line}")

                formatted_messages.append("\n".join(formatted_msg_lines))

            changes_text = "\n\n".join(formatted_messages)
            instructions_text = f"""Recent Changes:
{changes_text}

The update process will backup your configuration and preserve your settings.

Choose an option below to proceed."""
        else:
            # Fallback to static message if no commit messages available
            instructions_text = f"""The update process will:

    • Download the latest ArchRiot setup script
    • Backup your current configuration
    • Update system files and scripts
    • Preserve your personal settings

Choose an option below to proceed."""

        instructions_label.set_text(instructions_text)
        instructions_label.set_line_wrap(True)
        instructions_label.set_line_wrap_mode(Pango.WrapMode.WORD)
        instructions_label.set_max_width_chars(60)
        instructions_label.set_halign(Gtk.Align.START)
        instructions_label.set_valign(Gtk.Align.CENTER)
        instructions_label.set_justify(Gtk.Justification.LEFT)
        instructions_label.set_margin_start(20)
        instructions_label.set_margin_end(20)
        instructions_label.set_margin_top(15)
        instructions_label.set_margin_bottom(15)

        # Set font using CSS styling (modern approach)
        css_provider = Gtk.CssProvider()
        css_provider.load_from_data(b"""
        label {
            font-family: "Hack Nerd Font Mono";
            font-size: 14px;
        }
        """)
        style_context = instructions_label.get_style_context()
        style_context.add_provider(css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

        # Wrap in scrolled window to handle tall content
        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        scrolled_window.set_max_content_height(200)
        scrolled_window.set_propagate_natural_height(True)
        scrolled_window.add(instructions_label)

        container.pack_start(scrolled_window, True, True, 0)

    def add_buttons(self, container):
        """Add action buttons"""
        # Create button box
        button_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=15)
        button_box.set_halign(Gtk.Align.CENTER)
        button_box.set_margin_top(10)

        # Install button
        install_button = Gtk.Button(label="📥 Install")
        install_button.connect("clicked", self.on_install_clicked)
        install_button.set_size_request(120, 40)
        button_box.pack_start(install_button, False, False, 0)

        # Ignore Notifications button
        ignore_button = Gtk.Button(label="🔕 Ignore Notifications")
        ignore_button.connect("clicked", self.on_ignore_clicked)
        ignore_button.set_size_request(160, 40)
        button_box.pack_start(ignore_button, False, False, 0)

        # Close button
        close_button = Gtk.Button(label="❌ Close")
        close_button.connect("clicked", self.on_close_clicked)
        close_button.set_size_request(100, 40)
        button_box.pack_start(close_button, False, False, 0)

        container.pack_start(button_box, False, False, 0)

    def on_install_clicked(self, button):
        """Handle install button click - open terminal and run update command"""
        self.user_interacted = True  # Mark that user interacted
        self.log_dialog_state("User clicked Install button")

        # Cancel timeout since user interacted
        if self.dialog_timeout_id:
            GLib.source_remove(self.dialog_timeout_id)
            self.dialog_timeout_id = None

        # Clear waybar state file if managed by waybar
        if hasattr(self, 'waybar_managed') and self.waybar_managed:
            self.clear_waybar_state()
        try:
            # Create the update command
            update_command = "curl https://ArchRiot.org/setup.sh | bash"

            # Use hyprctl dispatch to launch terminal EXACTLY like SUPER+SHIFT+ENTER
            # Change to home directory first to avoid getcwd errors
            terminal_cmd = f"ghostty --class=com.mitchellh.ghostty-floating -e bash -c 'cd $HOME; echo \"Starting ArchRiot update...\"; {update_command}; echo \"Update complete. Press Enter to close.\"; read'"

            try:
                # Use hyprctl dispatch exec to launch exactly like SUPER+SHIFT+ENTER
                result = subprocess.run(['hyprctl', 'dispatch', 'exec', terminal_cmd],
                                      capture_output=True, text=True, timeout=10)

                if result.returncode == 0:
                    print("Successfully launched update terminal via hyprctl dispatch")
                else:
                    raise Exception(f"hyprctl dispatch failed: {result.stderr}")
            except Exception as e:
                raise Exception(f"Failed to launch terminal via hyprctl: {e}")

            # Keep dialog open briefly to show success
            print("Update terminal launched successfully")
            GLib.timeout_add_seconds(2, lambda: (self.cleanup_lock_file(), Gtk.main_quit()))

        except Exception as e:
            print(f"Error launching update: {e}")

    def on_ignore_clicked(self, button):
        """Handle ignore notifications button click"""
        self.user_interacted = True  # Mark that user interacted
        self.log_dialog_state("User clicked Ignore button")

        # Cancel timeout since user interacted
        if self.dialog_timeout_id:
            GLib.source_remove(self.dialog_timeout_id)
            self.dialog_timeout_id = None
        try:
            config = self.load_config()
            config['ignore_notifications'] = True
            self.save_config(config)

            dialog = Gtk.MessageDialog(
                transient_for=self.window,
                flags=0,
                message_type=Gtk.MessageType.INFO,
                buttons=Gtk.ButtonsType.OK,
                message_format="Notifications Disabled"
            )
            dialog.format_secondary_text("Future update notifications have been disabled.\n\nYou can re-enable them by running:\nversion-check --reset")
            dialog.run()
            dialog.destroy()

            self.cleanup_lock_file()
            Gtk.main_quit()

        except Exception as e:
            print(f"Error ignoring notifications: {e}")

    def on_close_clicked(self, button):
        """Handle close button click"""
        self.user_interacted = True  # Mark that user interacted
        self.log_dialog_state("User clicked Close button")

        # Cancel timeout since user interacted
        if self.dialog_timeout_id:
            GLib.source_remove(self.dialog_timeout_id)
            self.dialog_timeout_id = None
        self.cleanup_lock_file()
        Gtk.main_quit()

    def on_window_destroy(self, widget):
        """Handle window destruction"""
        # Cancel timeout if still active
        if self.dialog_timeout_id:
            GLib.source_remove(self.dialog_timeout_id)
            self.dialog_timeout_id = None

        # Log dialog destruction
        self.log_dialog_state(f"Dialog destroyed (user_interacted: {self.user_interacted})")

        # Only mark as interacted if dialog was visible for reasonable time
        # This prevents marking as interacted when dialog fails to show
        self.cleanup_lock_file()
        Gtk.main_quit()

    def on_dialog_timeout(self):
        """Handle dialog timeout - send fallback notification if no user interaction"""
        if not self.user_interacted:
            self.log_dialog_state("Dialog timeout - no user interaction detected")
            print("Dialog timeout - user may not have seen GTK dialog, sending fallback notification")
            # Send system notification as fallback
            try:
                subprocess.run([
                    'notify-send',
                    '--urgency=critical',
                    '--icon=system-software-update',
                    'ArchRiot Update Available',
                    f'New version {self.remote_version} is available!\nCurrent: {self.local_version}\n\nRun: python3 bin/version-check --force'
                ], check=False)
                print("Fallback notification sent")
            except Exception as e:
                print(f"Failed to send fallback notification: {e}")

            # Close the invisible dialog
            self.cleanup_lock_file()
            Gtk.main_quit()

        # Remove timeout
        self.dialog_timeout_id = None
        return False  # Don't repeat timeout

    def log_dialog_state(self, message):
        """Log dialog state for debugging"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] DIALOG: {message}"
        print(log_message)

        # Also log to file for persistent debugging
        try:
            log_dir = os.path.join(self.config_dir, 'logs')
            os.makedirs(log_dir, exist_ok=True)
            log_file = os.path.join(log_dir, 'version-check.log')
            with open(log_file, 'a') as f:
                f.write(log_message + '\n')
        except Exception:
            pass  # Don't let logging errors break the dialog

    def load_config(self):
        """Load version check configuration"""
        default_config = {
            "ignore_notifications": False,
            "last_check": None,
            "last_notified_version": None,
            "check_interval_hours": 4
        }

        if not os.path.exists(self.config_file):
            return default_config

        try:
            with open(self.config_file, 'r') as f:
                config = json.load(f)
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                return config
        except Exception as e:
            print(f"Error loading config: {e}")
            return default_config

    def save_config(self, config):
        """Save version check configuration"""
        try:
            os.makedirs(self.config_dir, exist_ok=True)
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
        except Exception as e:
            print(f"Error saving config: {e}")

    def setup_styling(self):
        """Set up CSS styling to match original dialog"""
        css_provider = Gtk.CssProvider()
        css_data = """
        * {
            font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
        }

        window {
            background: rgba(0, 0, 0, 0.7);
            color: #cdd6f4;
            font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
        }

        label {
            color: #cdd6f4;
            font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
        }

        textview {
            background: rgba(0, 0, 0, 0.7);
            color: #cdd6f4;
            border: none;
            font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
        }

        textview text {
            background: rgba(0, 0, 0, 0.7);
            color: #cdd6f4;
            font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
        }

        button {
            background: rgba(75, 0, 130, 1.0);
            color: #ffffff;
            border: none;
            border-radius: 8px;
            padding: 8px 16px;
            font-weight: bold;
            font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
        }

        button:hover {
            background: rgba(102, 51, 153, 1.0);
        }

        scrolledwindow {
            border: none;
            background: rgba(0, 0, 0, 0.7);
        }
        """

        css_provider.load_from_data(css_data.encode())

        # Apply CSS to default screen
        screen = Gdk.Screen.get_default()
        Gtk.StyleContext.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

class VersionChecker:
    def __init__(self):
        self.home_dir = os.path.expanduser('~')
        self.config_dir = os.path.join(self.home_dir, '.config', 'archriot')
        self.config_file = os.path.join(self.config_dir, 'versions.cfg')
        self.version_file = os.path.join(self.home_dir, '.local', 'share', 'archriot', 'VERSION')


    def load_config(self):
        """Load version check configuration"""
        default_config = {
            "ignore_notifications": False,
            "last_check": None,
            "last_notified_version": None,
            "check_interval_hours": 4
        }

        if not os.path.exists(self.config_file):
            return default_config

        try:
            with open(self.config_file, 'r') as f:
                config = json.load(f)
                # Merge with defaults to handle missing keys
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                return config
        except Exception as e:
            print(f"Error loading config: {e}")
            return default_config

    def save_config(self, config):
        """Save version check configuration"""
        try:
            os.makedirs(self.config_dir, exist_ok=True)
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
        except Exception as e:
            print(f"Error saving config: {e}")

    def get_local_version(self):
        """Read local ArchRiot version from VERSION file"""
        try:
            with open(self.version_file, 'r') as f:
                version = f.read().strip()
                return version
        except Exception as e:
            print(f"Error reading local version: {e}")
            return None

    def get_remote_version(self):
        """Fetch remote version from GitHub API"""
        try:
            # Primary method: Direct VERSION file from ArchRiot website
            url = "https://raw.githubusercontent.com/CyphrRiot/ArchRiot/master/VERSION"
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'ArchRiot-VersionChecker/1.0')

            with urllib.request.urlopen(req, timeout=10) as response:
                version = response.read().decode().strip()
                return version

        except Exception as e:
            print(f"Primary version fetch failed: {e}")

        try:
            # Fallback method: GitHub API
            url = "https://api.github.com/repos/CyphrRiot/ArchRiot/releases/latest"
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'ArchRiot-VersionChecker/1.0')

            with urllib.request.urlopen(req, timeout=10) as response:
                data = json.loads(response.read().decode())
                tag_name = data.get('tag_name', '')
                # Remove 'v' prefix if present
                version = tag_name.lstrip('v')
                return version

        except Exception as e:
            print(f"Fallback GitHub API failed: {e}")
            return None

    def parse_version(self, version_str):
        """Parse version string into comparable tuple"""
        if not version_str:
            return (0, 0, 0)

        # Remove any non-digit/dot characters and extract version parts
        clean_version = re.sub(r'[^0-9.]', '', version_str)
        parts = clean_version.split('.')

        try:
            # Pad with zeros if needed and convert to integers
            while len(parts) < 3:
                parts.append('0')
            return tuple(int(part) for part in parts[:3])
        except ValueError:
            return (0, 0, 0)

    def is_newer_version(self, local_version, remote_version):
        """Compare versions semantically"""
        local_tuple = self.parse_version(local_version)
        remote_tuple = self.parse_version(remote_version)

        return remote_tuple > local_tuple

    def should_check_now(self, config):
        """Determine if we should check for updates now"""
        if config.get('ignore_notifications', False):
            return False

        last_check = config.get('last_check')
        if not last_check:
            return True

        try:
            last_check_time = datetime.fromisoformat(last_check.replace('Z', '+00:00'))
            now = datetime.now(timezone.utc)
            hours_since_check = (now - last_check_time).total_seconds() / 3600

            interval = config.get('check_interval_hours', 4)
            return hours_since_check >= interval
        except Exception:
            return True

    def should_notify_version(self, config, remote_version):
        """Check if we should notify about this specific version"""
        last_notified = config.get('last_notified_version')
        if not last_notified:
            return True

        # Don't notify again for the same version
        return last_notified != remote_version

    def get_commits_between_versions(self, local_version, remote_version):
        """Fetch commit messages between two versions using GitHub API"""
        try:
            # First try with version tags
            url = f"https://api.github.com/repos/CyphrRiot/ArchRiot/compare/v{local_version}...v{remote_version}"
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'ArchRiot-VersionChecker/1.0')
            req.add_header('Accept', 'application/vnd.github.v3+json')

            with urllib.request.urlopen(req, timeout=10) as response:
                data = json.loads(response.read().decode())

                commits = data.get('commits', [])
                commit_messages = []

                for commit in commits:
                    message = commit.get('commit', {}).get('message', '').strip()
                    if message:
                        # Take first 2-3 lines of commit message for more detail
                        lines = message.split('\n')
                        # Get title and first few non-empty lines
                        display_lines = []
                        for line in lines[:4]:  # Max 4 lines to check
                            clean_line = line.strip()
                            if clean_line and len(display_lines) < 3:  # Max 3 lines to show
                                display_lines.append(clean_line)

                        if display_lines and not display_lines[0].startswith('Merge'):  # Skip merge commits
                            # Join lines with newlines to preserve formatting
                            formatted_message = '\n'.join(display_lines)
                            commit_messages.append(formatted_message)

                return commit_messages[:10]  # Limit to 10 most recent commits

        except urllib.error.HTTPError as e:
            print(f"Version tag comparison failed ({e}), trying recent commits fallback")

        except Exception as e:
            print(f"Error fetching version commits: {e}")

        # Fallback: Get recent commits from master branch
        try:
            url = "https://api.github.com/repos/CyphrRiot/ArchRiot/commits?per_page=10"
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'ArchRiot-VersionChecker/1.0')
            req.add_header('Accept', 'application/vnd.github.v3+json')

            with urllib.request.urlopen(req, timeout=10) as response:
                commits = json.loads(response.read().decode())
                commit_messages = []

                for commit in commits:
                    message = commit.get('commit', {}).get('message', '').strip()
                    if message:
                        # Take first 2-3 lines of commit message for more detail
                        lines = message.split('\n')
                        # Get title and first few non-empty lines
                        display_lines = []
                        for line in lines[:4]:  # Max 4 lines to check
                            clean_line = line.strip()
                            if clean_line and len(display_lines) < 3:  # Max 3 lines to show
                                display_lines.append(clean_line)

                        if display_lines and not display_lines[0].startswith('Merge'):  # Skip merge commits
                            # Join lines with newlines to preserve formatting
                            formatted_message = '\n'.join(display_lines)
                            commit_messages.append(formatted_message)

                print(f"Fallback: fetched {len(commit_messages)} recent commits")
                return commit_messages[:8]  # Limit to 8 recent commits

        except Exception as e:
            print(f"Fallback commit fetch failed: {e}")
            return []

    def launch_update_dialog(self, local_version, remote_version):
        """Launch the update notification dialog directly"""
        # Check if update dialog is already running using lock file
        lock_file = "/tmp/archriot_upgrade.lock"
        if os.path.exists(lock_file):
            try:
                with open(lock_file, 'r') as f:
                    lock_pid = f.read().strip()
                # Check if the PID is still running
                if os.path.exists(f"/proc/{lock_pid}"):
                    print("Update dialog already running - skipping duplicate")
                    return False
                else:
                    # Stale lock file, remove it
                    os.remove(lock_file)
            except Exception as e:
                print(f"Warning: Could not check lock file: {e}")

        try:
            print(f"Launching direct GTK dialog with LOCAL={local_version}, REMOTE={remote_version}")

            # Fetch commit messages for dynamic content
            commit_messages = self.get_commits_between_versions(local_version, remote_version)
            print(f"Fetched {len(commit_messages)} commit messages")
            if commit_messages:
                print("Commit messages to display:")
                for i, msg in enumerate(commit_messages[:8], 1):
                    print(f"  {i}. {msg}")

            # Create and show dialog directly - no subprocess needed!
            dialog = UpdateDialog(local_version, remote_version, commit_messages, disable_timeout=True)

            # Run GTK main loop
            Gtk.main()

            print("Dialog closed by user")

            # Only return True if user actually interacted with the dialog
            # This prevents marking versions as "notified" when dialog isn't visible
            if dialog.user_interacted:
                print("User interacted with dialog - marking as notified")
                return True
            else:
                print("User did not interact with dialog - will retry on next check")
                return False

        except Exception as e:
            print(f"Error launching update dialog: {e}")
            return False



    def update_check_timestamp(self, config):
        """Update the last check timestamp"""
        config['last_check'] = datetime.now(timezone.utc).isoformat()
        self.save_config(config)

    def update_notified_version(self, config, version):
        """Update the last notified version"""
        config['last_notified_version'] = version
        self.save_config(config)

    def run_check(self, force=False):
        """Main version check logic"""
        config = self.load_config()

        # Check if we should run now (unless forced)
        if not force and not self.should_check_now(config):
            return

        # Update check timestamp
        self.update_check_timestamp(config)

        # Get local version
        local_version = self.get_local_version()
        if not local_version:
            print("Could not determine local version")
            return

        # Get remote version
        remote_version = self.get_remote_version()
        if not remote_version:
            print("Could not fetch remote version")
            return

        print(f"Local version: {local_version}")
        print(f"Remote version: {remote_version}")

        # Check if update is available
        if self.is_newer_version(local_version, remote_version):
            print("Update available!")

            # Check if we should notify about this version
            if self.should_notify_version(config, remote_version):
                # Check if running from systemd (no TERM, no interactive session)
                is_systemd = not os.environ.get('TERM') and not sys.stdin.isatty()

                if is_systemd:
                    print("Running from systemd - creating waybar notification flag")
                    # Create flag file for waybar to show update icon
                    update_flag_file = os.path.join(self.config_dir, 'update_available')
                    try:
                        with open(update_flag_file, 'w') as f:
                            f.write(f"UPDATE_AVAILABLE:{local_version}->{remote_version}\n")
                        print(f"Update flag created: {local_version} -> {remote_version}")
                        # Don't mark as notified - let user click the waybar icon
                    except Exception as e:
                        print(f"Failed to create update flag: {e}")
                else:
                    print("Running interactively - launching GUI notification...")
                    success = self.launch_update_dialog(local_version, remote_version)

                    # Only mark as notified if GUI notification was successful AND user interacted
                    if success:
                        self.update_notified_version(config, remote_version)
                        print("Update notification completed successfully")
                    else:
                        print("GUI notification failed or user did not interact - will retry on next check")
            else:
                print("Already notified about this version")
        else:
            print("No update available")

def main():
    """Main entry point"""
    checker = VersionChecker()

    # Handle command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] == "--force":
            # Force check regardless of timing - always show GUI
            checker.run_check(force=True)
        elif sys.argv[1] == "--test":
            # Test mode - show current versions
            local = checker.get_local_version()
            remote = checker.get_remote_version()
            print(f"Local: {local}")
            print(f"Remote: {remote}")
            if local and remote:
                is_newer = checker.is_newer_version(local, remote)
                print(f"Update available: {is_newer}")
        elif sys.argv[1] == "--reset":
            # Reset config
            config = {
                "ignore_notifications": False,
                "last_check": None,
                "last_notified_version": None,
                "check_interval_hours": 4
            }
            checker.save_config(config)
            print("Configuration reset")
        elif sys.argv[1] == "--reset-notifications":
            # Reset only notification state, keep other settings
            config = checker.load_config()
            config['last_notified_version'] = None
            checker.save_config(config)
            print("Notification state reset - will notify about current updates")
        elif sys.argv[1] == "--clear-flag":
            # Clear waybar update flag
            update_flag_file = os.path.join(checker.config_dir, 'update_available')
            try:
                if os.path.exists(update_flag_file):
                    os.remove(update_flag_file)
                    print("Update flag cleared")
                else:
                    print("No update flag to clear")
            except Exception as e:
                print(f"Failed to clear update flag: {e}")
        elif sys.argv[1] == "--gui":
            # Fast GUI launch using cached data from waybar flag file
            update_flag_file = os.path.join(checker.config_dir, 'update_available')
            try:
                if os.path.exists(update_flag_file):
                    with open(update_flag_file, 'r') as f:
                        content = f.read().strip()
                    if content.startswith("UPDATE_AVAILABLE:"):
                        version_info = content.replace("UPDATE_AVAILABLE:", "")
                        if "->" in version_info:
                            local_ver, remote_ver = version_info.split("->", 1)
                            print(f"Fast GUI launch: {local_ver} -> {remote_ver}")
                            # Launch dialog directly with cached version info
                            # Create special dialog that doesn't mark as notified
                            dialog = UpdateDialog(local_ver, remote_ver)
                            dialog.waybar_managed = True  # Flag to prevent auto-notification
                            Gtk.main()
                        else:
                            print("Invalid version format in flag file")
                    else:
                        print("No update available in flag file")
                else:
                    # No flag file exists - do a quick check for fresh installs
                    print("No update flag file found - checking for updates...")
                    local_version = checker.get_local_version()
                    remote_version = checker.get_remote_version()

                    if local_version and remote_version and checker.is_newer_version(local_version, remote_version):
                        print(f"Update found: {local_version} -> {remote_version}")
                        # Create flag file for future fast access
                        os.makedirs(checker.config_dir, exist_ok=True)
                        with open(update_flag_file, 'w') as f:
                            f.write(f"UPDATE_AVAILABLE:{local_version}->{remote_version}\n")

                        # Fetch commit messages for dynamic content
                        checker = VersionChecker()
                        commit_messages = checker.get_commits_between_versions(local_version, remote_version)
                        print(f"Fetched {len(commit_messages)} commit messages for waybar dialog")
                        if commit_messages:
                            print("Commit messages to display:")
                            for i, msg in enumerate(commit_messages[:8], 1):
                                print(f"  {i}. {msg}")

                        # Launch dialog
                        dialog = UpdateDialog(local_version, remote_version, commit_messages, disable_timeout=True)
                        dialog.waybar_managed = True
                        Gtk.main()
                    else:
                        print("No updates available")
            except Exception as e:
                print(f"Error launching GUI: {e}")
        else:
            print("Usage: version-check [--force|--test|--reset|--reset-notifications|--clear-flag|--gui]")
            sys.exit(1)
    else:
        # Normal check
        checker.run_check()

if __name__ == "__main__":
    main()
