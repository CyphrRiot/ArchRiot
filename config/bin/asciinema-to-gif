#!/bin/bash
# asciinema-to-gif: Simple converter from asciinema v3 to GIF via v2 format

set -e

show_help() {
    echo "asciinema-to-gif - Convert asciinema recordings to GIF"
    echo ""
    echo "Usage: asciinema-to-gif [OPTIONS] <input.cast> [output.gif]"
    echo ""
    echo "Options:"
    echo "  -s, --speed SPEED    Playback speed (default: 1.0)"
    echo "  -f, --fps FPS        Frames per second (default: 10)"
    echo "  -h, --help           Show help"
    echo ""
    echo "Examples:"
    echo "  asciinema-to-gif demo.cast"
    echo "  asciinema-to-gif -s 2.0 -f 10 demo.cast output.gif"
}

error() {
    echo "Error: $1" >&2
    exit 1
}

# Defaults
SPEED=1.0
FPS=10

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -s|--speed)
            SPEED="$2"
            shift 2
            ;;
        -f|--fps)
            FPS="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            error "Unknown option: $1"
            ;;
        *)
            break
            ;;
    esac
done

# Check arguments
if [ $# -lt 1 ]; then
    error "Missing input file"
fi

INPUT_FILE="$1"
OUTPUT_FILE="${2:-${INPUT_FILE%.cast}.gif}"

# Check input file
if [ ! -f "$INPUT_FILE" ]; then
    error "Input file not found: $INPUT_FILE"
fi

# Check dependencies
if ! command -v agg &> /dev/null; then
    error "agg not found. Install with: yay -S asciinema-agg-bin"
fi

# Create temp file for v2 conversion
TEMP_FILE=$(mktemp --suffix=.cast)
trap "rm -f $TEMP_FILE" EXIT

# Convert v3 to v2 format using asciinema official converter
echo "Converting asciinema v3 â†’ v2 format..."

if asciinema convert --output-format asciicast-v2 "$INPUT_FILE" "$TEMP_FILE"; then
    echo "Official asciinema conversion completed"
else
    echo "Official conversion failed, trying manual method..."

python3 << EOF
import json

try:
    with open('$INPUT_FILE', 'r') as f:
        lines = f.readlines()

    if not lines:
        print("Error: Empty input file")
        exit(1)

    # Parse header
    header = json.loads(lines[0].strip())

    # Handle both v2 and v3 formats
    if header.get('version') == 2:
        # Already v2, just copy
        with open('$TEMP_FILE', 'w') as f:
            for line in lines:
                f.write(line)
        print("File already in v2 format")
    elif header.get('version') == 3:
        # Convert v3 to v2
        term = header.get('term', {})
        width = term.get('cols', 80)
        height = term.get('rows', 24)

        v2_header = {
            'version': 2,
            'width': width,
            'height': height
        }

        # Write converted file
        with open('$TEMP_FILE', 'w') as f:
            f.write(json.dumps(v2_header) + '\n')
            # Copy ALL event lines exactly as they are
            for line in lines[1:]:
                f.write(line)

        print(f"Converted v3 to v2 format ({width}x{height})")
    else:
        print(f"Warning: Unknown version {header.get('version')}")
        # Try to proceed anyway
        with open('$TEMP_FILE', 'w') as f:
            for line in lines:
                f.write(line)

except Exception as e:
    print(f"Conversion failed: {e}")
    exit(1)
EOF

    if [ $? -ne 0 ]; then
        error "Format conversion failed"
    fi
fi

# Convert to GIF with optimized compression
echo "Converting to GIF (speed: ${SPEED}x, fps: ${FPS})..."

if agg --speed "$SPEED" --fps-cap "$FPS" --idle-time-limit 999999 --last-frame-duration 1 "$TEMP_FILE" "$OUTPUT_FILE"; then
    if [ -f "$OUTPUT_FILE" ]; then
        SIZE=$(du -h "$OUTPUT_FILE" | cut -f1)
        echo "GIF created: $OUTPUT_FILE ($SIZE)"
    else
        error "Conversion completed but output file not found"
    fi
else
    error "GIF conversion failed"
fi
