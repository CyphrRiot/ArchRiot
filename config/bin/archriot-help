#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gtk, Gdk, Pango  # type: ignore
import os
import subprocess
import re
from pathlib import Path

class DynamicHelpWindow:
    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_title("ArchRiot Help System")
        self.window.set_default_size(900, 700)
        self.window.set_position(Gtk.WindowPosition.CENTER)
        self.window.set_resizable(False)

        # Make window explicitly non-modal
        self.window.set_modal(False)
        self.window.set_keep_above(False)
        self.window.set_focus_on_map(False)
        self.window.set_type_hint(Gdk.WindowTypeHint.NORMAL)

        # Set window to be 85% of screen height
        try:
            display = Gdk.Display.get_default()
            monitor = display.get_primary_monitor()
            if monitor:
                geometry = monitor.get_geometry()
                window_height = int(geometry.height * 0.85)
                window_width = min(950, int(geometry.width * 0.7))
            else:
                window_height = 700
                window_width = 900
        except:
            window_height = 700
            window_width = 900

        self.window.set_default_size(window_width, window_height)

        # Create main container
        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=15)
        main_box.set_margin_start(20)
        main_box.set_margin_end(20)
        main_box.set_margin_top(20)
        main_box.set_margin_bottom(20)

        # Add title
        title_label = Gtk.Label()
        title_label.set_markup('<span size="24000" weight="bold">ArchRiot Help</span>')
        title_label.set_halign(Gtk.Align.CENTER)
        main_box.pack_start(title_label, False, False, 0)

        # Add version info
        version = self.get_archriot_version()
        version_label = Gtk.Label()
        version_label.set_markup(f'<span size="11000" alpha="75%">ArchRiot v{version} • Press SUPER+H to show this help</span>')
        version_label.set_halign(Gtk.Align.CENTER)
        main_box.pack_start(version_label, False, False, 0)

        # Create scrollable content
        self.add_dynamic_content(main_box)

        # Add close button
        self.add_close_button(main_box)

        self.window.add(main_box)
        self.window.connect("destroy", self.on_window_destroy)
        self.window.connect("key-press-event", self.on_key_press)
        self.window.show_all()

    def parse_hyprland_keybindings(self):
        """Parse keybindings from hyprland.conf"""
        keybindings = []
        hypr_config = os.path.expanduser("~/.config/hypr/hyprland.conf")

        if not os.path.exists(hypr_config):
            return keybindings

        try:
            with open(hypr_config, 'r') as f:
                content = f.read()

            # Parse bind statements
            bind_pattern = r'bind\s*=\s*([^,]+),\s*([^,]+),\s*exec,\s*(.+)'
            bind_simple_pattern = r'bind\s*=\s*([^,]+),\s*([^,]+),\s*([^,]+)'

            for line in content.split('\n'):
                line = line.strip()
                if line.startswith('#') or not line.startswith('bind'):
                    continue

                # Try exec pattern first
                match = re.search(bind_pattern, line)
                if match:
                    modifier, key, command = match.groups()
                    modifier = modifier.strip()
                    key = key.strip()
                    command = command.strip()

                    # Clean up command for display
                    display_cmd = self.clean_command_for_display(command)

                    # Format key combination
                    key_combo = self.format_key_combination(modifier, key)
                    keybindings.append((key_combo, display_cmd, 'exec'))
                else:
                    # Try simple action pattern
                    match = re.search(bind_simple_pattern, line)
                    if match:
                        modifier, key, action = match.groups()
                        modifier = modifier.strip()
                        key = key.strip()
                        action = action.strip()

                        key_combo = self.format_key_combination(modifier, key)
                        action_desc = self.humanize_action(action)
                        if action_desc is not None:  # Skip filtered out actions
                            keybindings.append((key_combo, action_desc, 'action'))

        except Exception as e:
            print(f"Error parsing hyprland config: {e}")

        return sorted(keybindings, key=lambda x: (x[2], x[0]))  # Sort by type, then key



    def clean_command_for_display(self, command):
        """Clean up command for human-readable display"""
        # Remove common prefixes
        command = command.strip('"\'')

        # Handle $HOME variable expansion
        if command.startswith('$HOME/'):
            command = command.replace('$HOME/', '')

        # Handle $browser variable (resolve first before other processing)
        if command.startswith('$browser'):
            # Check for web apps first
            if '--app=' in command:
                app_match = re.search(r'--app="([^"]+)"', command)
                if app_match:
                    url = app_match.group(1)
                    if 'mail.proton.me' in url:
                        return "Proton Mail"
                    elif 'messages.google.com' in url:
                        return "Google Messages"
                    elif 'x.com/compose' in url:
                        return "Twitter/X (Compose)"
                    elif 'x.com' in url:
                        return "Twitter/X"
            return "Browser (Brave)"

        # Handle $terminal variable
        if command.startswith('$terminal'):
            if '-e nvim' in command:
                return "Terminal with Neovim"
            elif '-e btop' in command:
                return "System monitor (btop)"
            return "Terminal (Ghostty)"

        # Handle $fileManager variable
        if command.startswith('$fileManager'):
            return "File manager (Thunar)"

        # Handle ArchRiot bin scripts with specific names
        if 'archriot/bin/' in command or '.local/share/archriot/bin/' in command:
            script_name = command.split('/')[-1]
            script_descriptions = {
                'theme-next': 'Next theme',
                'swaybg-next': 'Next background',
                'power-menu': 'Power menu',
                'fix-background': 'Fix background issues',
                'fix-thunar-thumbnails': 'Fix thumbnails',
                'validate-system': 'System health check',
                'show-keybindings': 'Show keybindings',
                'toggle-idle': 'Toggle screen lock',
                'memory-profiler': 'Memory analysis',
                'performance-analysis': 'Performance check',
                'startup-profiler': 'Boot analysis',
                'upgrade-system': 'System upgrade',
                'welcome': 'Welcome screen',
                'archriot-help': 'Help system'
            }
            return script_descriptions.get(script_name, f"{script_name} (utility)")

        if command.startswith('hypr'):
            return f"Hyprland: {command}"

        if '.config/hypr/scripts/' in command:
            script_name = command.split('/')[-1].replace('.sh', '')
            if script_name == 'signal-launcher':
                return "Signal messenger"
            return f"{script_name} (Hypr script)"

        if command.startswith('fuzzel'):
            return "App launcher (Fuzzel)"

        if command.startswith('pkill'):
            return "Reload Waybar"

        if command.startswith('gnome-text-editor'):
            return "Text editor"

        if command.startswith('zed'):
            return "Zed editor"

        # Fallback
        return command.split()[0] if command else "Unknown command"

    def format_key_combination(self, modifier, key):
        """Format key combination for display"""
        # Clean up modifier
        mod_map = {
            '$mod': 'SUPER',
            '$mod SHIFT': 'SUPER + SHIFT',
            '$mod CTRL': 'SUPER + CTRL',
            '$mod CTRL SHIFT': 'SUPER + CTRL + SHIFT',
            '$mod ALT': 'SUPER + ALT'
        }

        clean_mod = mod_map.get(modifier, modifier.replace('$mod', 'SUPER'))

        # Clean up key
        key_map = {
            'return': 'RETURN',
            'space': 'SPACE',
            'escape': 'ESC',
            'comma': ',',
            'slash': '/',
            'minus': '-',
            'equal': '=',
            'left': '←',
            'right': '→',
            'up': '↑',
            'down': '↓'
        }

        clean_key = key_map.get(key.lower(), key.upper())

        return f"{clean_mod} + {clean_key}" if clean_mod else clean_key

    def humanize_action(self, action):
        """Convert Hyprland actions to human descriptions"""
        # Filter out workspaces > 4
        if 'workspace' in action:
            if ', 1' in action:
                return 'Switch to workspace 1'
            elif ', 2' in action:
                return 'Switch to workspace 2'
            elif ', 3' in action:
                return 'Switch to workspace 3'
            elif ', 4' in action:
                return 'Switch to workspace 4'
            elif 'movetoworkspace, 1' in action:
                return 'Move to workspace 1'
            elif 'movetoworkspace, 2' in action:
                return 'Move to workspace 2'
            elif 'movetoworkspace, 3' in action:
                return 'Move to workspace 3'
            elif 'movetoworkspace, 4' in action:
                return 'Move to workspace 4'
            else:
                # Skip workspaces 5-10
                return None

        action_map = {
            'killactive': 'Close window',
            'togglefloating': 'Toggle floating mode',
            'togglesplit': 'Toggle split direction',
            'pseudo': 'Toggle pseudo-tiling',
            'movefocus': 'Move focus',
            'swapwindow': 'Swap windows',
            'movewindow': 'Move window',
            'resizeactive': 'Resize window',
            'togglespecialworkspace': 'Toggle special workspace',
            'movetoworkspacesilent': 'Move to workspace (silent)'
        }

        for hypr_action, desc in action_map.items():
            if hypr_action in action:
                return desc

        return action

    def discover_bin_utilities(self):
        """Dynamically discover utilities in /bin/ directory"""
        utilities = []
        bin_dir = os.path.expanduser("~/.local/share/archriot/bin")

        if not os.path.exists(bin_dir):
            return utilities

        try:
            for item in os.listdir(bin_dir):
                item_path = os.path.join(bin_dir, item)
                if os.path.isfile(item_path) and os.access(item_path, os.X_OK):
                    # Skip scripts subdirectory and hidden files
                    if item.startswith('.') or item == 'scripts':
                        continue

                    # Try to get description from file header
                    description = self.extract_script_description(item_path)
                    utilities.append((item, description))
        except Exception as e:
            print(f"Error discovering utilities: {e}")

        return sorted(utilities)

    def extract_script_description(self, script_path):
        """Extract description from script comments"""
        try:
            with open(script_path, 'r') as f:
                lines = f.readlines()[:20]  # Only check first 20 lines

            for line in lines:
                line = line.strip()
                # Look for description patterns
                if re.match(r'#.*[Ff]ix.*', line):
                    return line[1:].strip()
                elif re.match(r'#.*[Dd]escription:', line):
                    return line.split(':', 1)[1].strip()
                elif re.match(r'#.*[Pp]urpose:', line):
                    return line.split(':', 1)[1].strip()
                elif line.startswith('#') and any(word in line.lower() for word in ['tool', 'script', 'utility', 'system', 'fix', 'setup']):
                    desc = line[1:].strip()
                    if len(desc) > 10 and not desc.startswith('!'):
                        return desc

            # Fallback descriptions based on filename
            name_descriptions = {
                'fix-background': 'Fix theme/background issues',
                'fix-thunar-thumbnails': 'Fix file thumbnail generation',
                'fix-touchpad-config': 'Configure touchpad settings',
                'validate-system': 'Check system health and configuration',
                'show-keybindings': 'Show searchable keybinding reference',
                'toggle-idle': 'Toggle screen locking on/off',
                'setup-temperature': 'Configure CPU temperature monitoring',
                'power-menu': 'System power options menu',
                'theme-next': 'Switch to next available theme',
                'memory-profiler': 'Analyze system memory usage',
                'performance-analysis': 'System performance diagnostics',
                'startup-profiler': 'Analyze boot time performance',
                'upgrade-system': 'Optimized system upgrade utility',
                'apple-display-brightness': 'Control Apple display brightness',
                'fingerprint-setup': 'Configure fingerprint authentication',
                'signal-wayland': 'Launch Signal with Wayland support',
                'zed-wayland': 'Launch Zed editor with Wayland support',
                'battery-monitor': 'Monitor battery status and alerts',
                'welcome': 'Show ArchRiot welcome screen',
                'version': 'Display ArchRiot version information',
                'archriot-help': 'Show this help system'
            }

            return name_descriptions.get(os.path.basename(script_path), 'ArchRiot utility script')

        except Exception:
            return 'ArchRiot utility script'

    def add_dynamic_content(self, container):
        # Create scrollable window
        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        scrolled_window.set_kinetic_scrolling(True)
        scrolled_window.set_size_request(-1, 500)

        # Create text view
        text_view = Gtk.TextView()
        text_view.set_editable(False)
        text_view.set_cursor_visible(False)
        text_view.set_wrap_mode(Gtk.WrapMode.NONE)
        text_view.set_left_margin(25)
        text_view.set_right_margin(25)
        text_view.set_top_margin(20)
        text_view.set_bottom_margin(20)

        # Set monospace font
        font_desc = Pango.FontDescription()
        font_desc.set_family("Hack Nerd Font Mono")
        font_desc.set_size(12 * Pango.SCALE)
        text_view.modify_font(font_desc)

        buffer = text_view.get_buffer()

        # Create formatting tags
        header_tag = buffer.create_tag("header",
                                     weight=Pango.Weight.BOLD,
                                     scale=1.3,
                                     foreground="#7dcfff")

        key_tag = buffer.create_tag("key",
                                   weight=Pango.Weight.BOLD,
                                   foreground="#7aa2f7")

        command_tag = buffer.create_tag("command",
                                      weight=Pango.Weight.BOLD,
                                      foreground="#7dcfff")

        # Parse dynamic content
        keybindings = self.parse_hyprland_keybindings()
        utilities = self.discover_bin_utilities()

        iter_end = buffer.get_end_iter()

        # Add keybindings section
        buffer.insert_with_tags(iter_end, "🎮 HYPRLAND KEYBINDINGS\n", header_tag)
        iter_end = buffer.get_end_iter()

        # Group keybindings
        app_bindings = [(k, v) for k, v, t in keybindings if t == 'exec']
        action_bindings = [(k, v) for k, v, t in keybindings if t == 'action']

        # Application keybindings
        if app_bindings:
            buffer.insert(iter_end, "\n📱 Applications & Launchers:\n")
            iter_end = buffer.get_end_iter()

            for key, desc in app_bindings:
                buffer.insert_with_tags(iter_end, f"  {key:<40}", key_tag)
                iter_end = buffer.get_end_iter()
                buffer.insert(iter_end, f" {desc}\n")
                iter_end = buffer.get_end_iter()

        # Window management
        if action_bindings:
            buffer.insert(iter_end, "\n🪟 Window Management:\n")
            iter_end = buffer.get_end_iter()

            for key, desc in action_bindings:
                buffer.insert_with_tags(iter_end, f"  {key:<40}", key_tag)
                iter_end = buffer.get_end_iter()
                buffer.insert(iter_end, f" {desc}\n")
                iter_end = buffer.get_end_iter()

        # Add utilities section
        buffer.insert(iter_end, "\n")
        iter_end = buffer.get_end_iter()
        buffer.insert_with_tags(iter_end, "🔧 AVAILABLE UTILITIES\n", header_tag)
        iter_end = buffer.get_end_iter()

        if utilities:
            for name, desc in utilities:
                buffer.insert_with_tags(iter_end, f"  {name:<40}", command_tag)
                iter_end = buffer.get_end_iter()
                buffer.insert(iter_end, f" {desc}\n")
                iter_end = buffer.get_end_iter()

        # Add footer
        buffer.insert(iter_end, "\n")
        iter_end = buffer.get_end_iter()

        footer_tag = buffer.create_tag("footer",
                                     style=Pango.Style.ITALIC,
                                     scale=0.9,
                                     foreground="#565f89")
        buffer.insert_with_tags(iter_end,
                              "💡 This help reflects your current system configuration.\n"
                              "📚 For more info: https://github.com/CyphrRiot/ArchRiot\n"
                              "⌨️ Press ESC or click Close to exit.",
                              footer_tag)

        scrolled_window.add(text_view)
        container.pack_start(scrolled_window, True, True, 0)

    def add_close_button(self, container):
        # Create button box
        button_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
        button_box.set_halign(Gtk.Align.CENTER)

        # Close button
        close_button = Gtk.Button(label="Close (ESC)")
        close_button.connect("clicked", self.on_close)
        close_button.set_size_request(120, 35)
        button_box.pack_start(close_button, False, False, 0)

        container.pack_start(button_box, False, False, 0)

    def on_close(self, button=None):
        Gtk.main_quit()

    def on_key_press(self, widget, event):
        # Close on ESC key
        if event.keyval == Gdk.KEY_Escape:
            self.on_close()
            return True
        return False

    def get_archriot_version(self):
        """Read ArchRiot version from VERSION file"""
        home_dir = os.environ.get('HOME') or os.path.expanduser('~')
        version_path = os.path.join(home_dir, '.local', 'share', 'archriot', 'VERSION')

        try:
            with open(version_path, 'r') as f:
                version = f.read().strip()
                return version
        except Exception as e:
            return "unknown"

    def on_window_destroy(self, widget):
        """Handle window destruction"""
        Gtk.main_quit()

def main():
    # Set up CSS for styling
    css_provider = Gtk.CssProvider()
    css_data = """
    * {
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    window {
        background: rgba(26, 27, 38, 0.95);
        color: #cdd6f4;
    }

    label {
        color: #cdd6f4;
    }

    textview {
        background: rgba(26, 27, 38, 0.95);
        color: #cdd6f4;
        border: none;
    }

    textview text {
        background: rgba(26, 27, 38, 0.95);
        color: #cdd6f4;
    }

    button {
        background: rgba(75, 0, 130, 1.0);
        color: #ffffff;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-weight: bold;
        min-width: 100px;
        min-height: 32px;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    button:hover {
        background: rgba(102, 51, 153, 1.0);
    }

    scrolledwindow {
        border: 1px solid rgba(125, 207, 255, 0.3);
        border-radius: 8px;
        background: rgba(26, 27, 38, 0.95);
    }

    scrollbar {
        background: rgba(0, 0, 0, 0.3);
        border-radius: 4px;
    }

    scrollbar slider {
        background: rgba(125, 207, 255, 0.6);
        border-radius: 4px;
        min-width: 8px;
    }

    scrollbar slider:hover {
        background: rgba(125, 207, 255, 0.8);
    }
    """

    css_provider.load_from_data(css_data.encode())

    # Apply CSS to default screen
    screen = Gdk.Screen.get_default()
    Gtk.StyleContext.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    DynamicHelpWindow()
    Gtk.main()

if __name__ == "__main__":
    main()
