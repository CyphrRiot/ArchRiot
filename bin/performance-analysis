#!/bin/bash

# OhmArchy Performance Analysis Script
# Comprehensive system performance profiling and optimization analysis

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Output file
REPORT_FILE="/tmp/performance-analysis-$(date +%Y%m%d-%H%M%S).txt"

print_header() {
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                 OhmArchy Performance Analysis                ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}📊 Analyzing system performance and identifying optimization opportunities${NC}"
    echo -e "${CYAN}📄 Report will be saved to: $REPORT_FILE${NC}"
    echo ""
}

log_to_file() {
    echo "$1" | tee -a "$REPORT_FILE"
}

section_header() {
    local title="$1"
    echo "" | tee -a "$REPORT_FILE"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}" | tee -a "$REPORT_FILE"
    echo -e "${BLUE} $title${NC}" | tee -a "$REPORT_FILE"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
}

subsection_header() {
    local title="$1"
    echo "" | tee -a "$REPORT_FILE"
    echo -e "${YELLOW}──── $title ────${NC}" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
}

analyze_boot_performance() {
    section_header "🚀 BOOT PERFORMANCE ANALYSIS"

    if command -v systemd-analyze >/dev/null 2>&1; then
        subsection_header "Boot Timeline"
        if systemd-analyze >/dev/null 2>&1; then
            systemd-analyze | tee -a "$REPORT_FILE"
        else
            echo "⚠ Unable to analyze boot time (may not be available in all environments)" | tee -a "$REPORT_FILE"
        fi

        subsection_header "Critical Chain (Slowest Services)"
        if systemd-analyze critical-chain 2>/dev/null | head -20; then
            systemd-analyze critical-chain 2>/dev/null | head -20 | tee -a "$REPORT_FILE"
        else
            echo "⚠ Critical chain analysis not available" | tee -a "$REPORT_FILE"
        fi

        subsection_header "Slowest Services (Top 10)"
        if systemd-analyze blame 2>/dev/null | head -10; then
            systemd-analyze blame 2>/dev/null | head -10 | tee -a "$REPORT_FILE"
        else
            echo "⚠ Service blame analysis not available" | tee -a "$REPORT_FILE"
        fi
    else
        echo "⚠ systemd-analyze not available" | tee -a "$REPORT_FILE"
    fi
}

analyze_memory_usage() {
    section_header "📊 MEMORY USAGE ANALYSIS"

    subsection_header "Current Memory Statistics"
    free -h | tee -a "$REPORT_FILE"

    subsection_header "Top Memory Consumers (Processes)"
    ps aux --sort=-%mem | head -10 | tee -a "$REPORT_FILE"

    subsection_header "Systemd Service Memory Usage"
    if command -v systemctl >/dev/null 2>&1; then
        systemctl status --no-pager | grep -E "(memory|Memory)" | head -5 | tee -a "$REPORT_FILE" || echo "No memory info available" | tee -a "$REPORT_FILE"
    fi

    subsection_header "OhmArchy-Specific Processes"
    ps aux | grep -E "(waybar|hypr|mako|ghostty|swaybg)" | grep -v grep | tee -a "$REPORT_FILE" || echo "No OhmArchy processes found" | tee -a "$REPORT_FILE"
}

analyze_service_status() {
    section_header "⚙️ SYSTEM SERVICES ANALYSIS"

    subsection_header "Failed Services"
    if systemctl --failed --no-pager 2>/dev/null; then
        systemctl --failed --no-pager 2>/dev/null | tee -a "$REPORT_FILE"
    else
        echo "✅ No failed services found" | tee -a "$REPORT_FILE"
    fi

    subsection_header "OhmArchy-Specific Services"
    echo "User Services:" | tee -a "$REPORT_FILE"
    systemctl --user list-units | grep -E "(omarchy|waybar|hypr|mako)" | tee -a "$REPORT_FILE" || echo "No OhmArchy user services running" | tee -a "$REPORT_FILE"

    subsection_header "Auto-starting Services"
    systemctl list-unit-files --state=enabled --no-pager | head -10 | tee -a "$REPORT_FILE"
}

analyze_shell_performance() {
    section_header "🐚 SHELL STARTUP PERFORMANCE"

    subsection_header "Bash Startup Time"
    if [[ -f "$HOME/.bashrc" ]]; then
        echo "Testing bash startup time..." | tee -a "$REPORT_FILE"
        time_output=$(time bash -c "source ~/.bashrc; exit" 2>&1 | grep real || echo "Unable to measure")
        echo "Bash startup: $time_output" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Fish Startup Time"
    if command -v fish >/dev/null 2>&1; then
        echo "Testing fish startup time..." | tee -a "$REPORT_FILE"
        time_output=$(time fish -c "exit" 2>&1 | grep real || echo "Unable to measure")
        echo "Fish startup: $time_output" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Shell Configuration Size"
    if [[ -f "$HOME/.bashrc" ]]; then
        echo "~/.bashrc size: $(wc -l < ~/.bashrc) lines" | tee -a "$REPORT_FILE"
    fi
    if [[ -f "$HOME/.config/fish/config.fish" ]]; then
        echo "fish config size: $(wc -l < ~/.config/fish/config.fish) lines" | tee -a "$REPORT_FILE"
    fi
}

analyze_application_performance() {
    section_header "🚀 APPLICATION LAUNCH PERFORMANCE"

    subsection_header "Font Cache Status"
    if command -v fc-list >/dev/null 2>&1; then
        font_count=$(fc-list | wc -l)
        echo "Installed fonts: $font_count" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Icon Cache Status"
    if [[ -d "$HOME/.cache/icon-theme.cache" ]]; then
        echo "Icon cache size: $(du -sh ~/.cache/icon-theme.cache 2>/dev/null || echo "N/A")" | tee -a "$REPORT_FILE"
    fi

    subsection_header "GTK Cache Status"
    if [[ -d "$HOME/.cache/gdk-pixbuf-loaders.cache" ]]; then
        echo "GDK cache found: $(ls -la ~/.cache/gdk-pixbuf-loaders.cache 2>/dev/null || echo "None")" | tee -a "$REPORT_FILE"
    fi
}

analyze_disk_performance() {
    section_header "💾 DISK PERFORMANCE ANALYSIS"

    subsection_header "Disk Usage"
    df -h | tee -a "$REPORT_FILE"

    subsection_header "Cache Directory Sizes"
    echo "Cache directory analysis:" | tee -a "$REPORT_FILE"
    if [[ -d "$HOME/.cache" ]]; then
        du -sh ~/.cache/* 2>/dev/null | sort -hr | head -10 | tee -a "$REPORT_FILE" || echo "Unable to analyze cache" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Temporary Files"
    echo "Temp directory usage:" | tee -a "$REPORT_FILE"
    du -sh /tmp/* 2>/dev/null | sort -hr | head -5 | tee -a "$REPORT_FILE" || echo "No significant temp files" | tee -a "$REPORT_FILE"
}

analyze_network_performance() {
    section_header "🌐 NETWORK PERFORMANCE"

    subsection_header "Network Interfaces"
    ip addr show | grep -E "(inet|state)" | tee -a "$REPORT_FILE"

    subsection_header "DNS Performance"
    if command -v nslookup >/dev/null 2>&1; then
        echo "Testing DNS resolution..." | tee -a "$REPORT_FILE"
        time_output=$(time nslookup google.com 2>&1 | grep -E "(real|Server)" || echo "DNS test failed")
        echo "$time_output" | tee -a "$REPORT_FILE"
    fi
}

generate_recommendations() {
    section_header "💡 OPTIMIZATION RECOMMENDATIONS"

    subsection_header "High Priority Recommendations"
    echo "Based on the analysis above, here are the top optimization opportunities:" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"

    # Check memory usage
    local mem_usage=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
    if (( $(echo "$mem_usage > 80" | bc -l 2>/dev/null || echo 0) )); then
        echo "🔴 HIGH: Memory usage is ${mem_usage}% - consider reducing background processes" | tee -a "$REPORT_FILE"
    elif (( $(echo "$mem_usage > 60" | bc -l 2>/dev/null || echo 0) )); then
        echo "🟡 MEDIUM: Memory usage is ${mem_usage}% - monitor for memory leaks" | tee -a "$REPORT_FILE"
    else
        echo "✅ GOOD: Memory usage is ${mem_usage}% - within acceptable range" | tee -a "$REPORT_FILE"
    fi

    # Check cache sizes
    if [[ -d "$HOME/.cache" ]]; then
        local cache_size=$(du -sm ~/.cache 2>/dev/null | cut -f1)
        if [[ $cache_size -gt 1000 ]]; then
            echo "🟡 MEDIUM: Cache directory is ${cache_size}MB - consider periodic cleanup" | tee -a "$REPORT_FILE"
        fi
    fi

    # Check for failed services
    local failed_services=$(systemctl --failed --no-pager 2>/dev/null | wc -l)
    if [[ $failed_services -gt 1 ]]; then
        echo "🔴 HIGH: $failed_services failed services detected - investigate and fix" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Automated Optimization Commands"
    echo "Run these commands to apply basic optimizations:" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# Clear package cache:" | tee -a "$REPORT_FILE"
    echo "sudo pacman -Scc" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# Clear user caches:" | tee -a "$REPORT_FILE"
    echo "rm -rf ~/.cache/thumbnails/*" | tee -a "$REPORT_FILE"
    echo "rm -rf ~/.cache/fontconfig/*" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# Rebuild font cache:" | tee -a "$REPORT_FILE"
    echo "fc-cache -fv" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# Update desktop database:" | tee -a "$REPORT_FILE"
    echo "update-desktop-database ~/.local/share/applications/" | tee -a "$REPORT_FILE"
}

main() {
    print_header

    # Initialize report file
    echo "OhmArchy Performance Analysis Report" > "$REPORT_FILE"
    echo "Generated: $(date)" >> "$REPORT_FILE"
    echo "System: $(uname -a)" >> "$REPORT_FILE"

    # Run analyses
    analyze_boot_performance
    analyze_memory_usage
    analyze_service_status
    analyze_shell_performance
    analyze_application_performance
    analyze_disk_performance
    analyze_network_performance
    generate_recommendations

    # Completion message
    section_header "📋 ANALYSIS COMPLETE"
    echo -e "${GREEN}✅ Performance analysis completed successfully!${NC}" | tee -a "$REPORT_FILE"
    echo -e "${GREEN}📄 Full report saved to: $REPORT_FILE${NC}" | tee -a "$REPORT_FILE"
    echo -e "${CYAN}📊 Review the recommendations section for optimization opportunities${NC}" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo -e "${YELLOW}💡 To apply optimizations, run: optimize-system${NC}" | tee -a "$REPORT_FILE"
}

# Check for required dependencies
check_dependencies() {
    local missing_deps=()

    for cmd in bc; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_deps+=("$cmd")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "${YELLOW}⚠ Installing missing dependencies: ${missing_deps[*]}${NC}"
        if command -v pacman >/dev/null 2>&1; then
            sudo pacman -S --noconfirm "${missing_deps[@]}" || echo "Some dependencies could not be installed"
        fi
    fi
}

# Run dependency check and main function
check_dependencies
main "$@"
