#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gtk, Gdk, GdkPixbuf, GLib, Pango  # type: ignore
import os
import json
import sys

class WelcomeWindow:
    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_title("Welcome to ArchRiot")
        self.window.set_default_size(800, 600)
        self.window.set_position(Gtk.WindowPosition.CENTER)
        self.window.set_resizable(False)

        # Make window explicitly non-modal
        self.window.set_modal(False)
        self.window.set_keep_above(False)
        self.window.set_focus_on_map(False)
        self.window.set_type_hint(Gdk.WindowTypeHint.NORMAL)

        # Set window to be smaller for better compatibility with scaled displays
        try:
            display = Gdk.Display.get_default()
            monitor = display.get_primary_monitor()
            if monitor:
                geometry = monitor.get_geometry()
                window_height = min(int(geometry.height * 0.75), 650)  # Max 650px or 75% of screen
            else:
                window_height = 650  # fallback
        except:
            window_height = 650  # fallback
        self.window.set_default_size(800, window_height)

        # Create main container
        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=20)
        main_box.set_margin_start(0)
        main_box.set_margin_end(0)
        main_box.set_margin_top(0)
        main_box.set_margin_bottom(30)

        # Add title
        #title_label = Gtk.Label()
        #title_label.set_markup('<span size="28000" weight="bold">Welcome!</span>')
        #title_label.set_halign(Gtk.Align.CENTER)
        #main_box.pack_start(title_label, False, False, 0)

        # Add Welcome image
        self.add_welcome_image(main_box)

        # Add main text
        self.add_main_text(main_box)

        # Add buttons
        self.add_buttons(main_box)

        self.window.add(main_box)
        self.window.connect("destroy", self.on_window_destroy)
        self.window.show_all()

    def add_welcome_image(self, container):
        # Add Welcome image - use image directly from repository
        home_dir = os.environ.get('HOME') or os.path.expanduser('~')
        image_path = os.path.join(home_dir, '.local', 'share', 'archriot', 'images', 'welcome.png')

        if os.path.exists(image_path):
            try:
                # Load and scale the image to window width
                pixbuf = GdkPixbuf.Pixbuf.new_from_file(image_path)
                # Scale to full window width (800px) while maintaining aspect ratio
                width = pixbuf.get_width()
                height = pixbuf.get_height()
                scale_factor = 800.0 / width
                new_width = 800
                new_height = int(height * scale_factor)
                pixbuf = pixbuf.scale_simple(new_width, new_height, GdkPixbuf.InterpType.BILINEAR)

                image = Gtk.Image.new_from_pixbuf(pixbuf)
                image.set_halign(Gtk.Align.FILL)
                container.pack_start(image, False, False, 0)
            except Exception as e:
                print(f"Could not load welcome.png: {e}")

    def add_main_text(self, container):
        # Read version from VERSION file
        version = self.get_archriot_version()

        # Create scrollable text view
        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        scrolled_window.set_size_request(-1, 400)

        text_view = Gtk.TextView()
        text_view.set_editable(False)
        text_view.set_cursor_visible(False)
        text_view.set_wrap_mode(Gtk.WrapMode.WORD)
        text_view.set_left_margin(40)
        text_view.set_right_margin(40)
        text_view.set_top_margin(20)
        text_view.set_bottom_margin(20)

        # Set font family and size for text view
        font_desc = Pango.FontDescription()
        font_desc.set_family("Hack Nerd Font Mono")
        font_desc.set_size(13 * Pango.SCALE)
        text_view.override_font(font_desc)

        buffer = text_view.get_buffer()

        # Create text with markup for clickable links
        text_content_parts = [
            f"ArchRiot v{version} is based on Hyprland.\n\nHyprland is not like other window managers. You basically get no click-here-for-stuff abilities at all. \n\nI've tried to make ArchRiot as intuitive as possible, while still respecting the user and their abilities.\n\n",
            "There's an \"A\" (Arch Logo) in the upper left that will launch an app drawer or launcher if you want it, but... within a day you'll be doing this:\n\n",
            "SUPER+H = Help Screen\n\n",
            "SUPER+F = Open File Browser\n",
            "SUPER+ENTER = Open Terminal\n",
            "SUPER+B = Open Brave Browser\n",
            "SUPER+X = Open Twitter/X (Special Window)\n",
            "SUPER+SPACE = Launch App Search Window\n",
            "SUPER+Q or SUPER+W = Close/Quit Window!\n\n"
            "Don't like the background? SUPER+CTRL+SPACE to switch between over a dozen hand-crafted backgrounds made (mostly) for ArchRiot.\n\n",
            "I hope you enjoy using ArchRiot as much as I enjoyed putting it together."
        ]

        # Insert text parts
        iter_end = buffer.get_end_iter()
        for part in text_content_parts:
            buffer.insert(iter_end, part)
            iter_end = buffer.get_end_iter()

        # Insert signature with larger font
        signature_tag = buffer.create_tag("signature", scale=1.2)
        buffer.insert_with_tags(iter_end, "\n\nùìíùîÇùìπùì±ùìÆùìª ùì°ùì≤ùì∏ùìΩ", signature_tag)
        iter_end = buffer.get_end_iter()

        buffer.insert(iter_end, "\n\n")
        iter_end = buffer.get_end_iter()

        # Insert clickable link for Twitter
        twitter_tag = buffer.create_tag("twitter_link", foreground="#89b4fa", underline=True)
        buffer.insert_with_tags(iter_end, "Cypher Riot on X", twitter_tag)
        iter_end = buffer.get_end_iter()

        buffer.insert(iter_end, " or ")
        iter_end = buffer.get_end_iter()

        # Insert clickable link for GitHub
        github_tag = buffer.create_tag("github_link", foreground="#89b4fa", underline=True)
        buffer.insert_with_tags(iter_end, "ArchRiot on GitHub", github_tag)
        iter_end = buffer.get_end_iter()


        # Connect click events for links
        text_view.connect("button-press-event", self.on_text_clicked)

        scrolled_window.add(text_view)
        container.pack_start(scrolled_window, True, True, 0)

    def add_buttons(self, container):
        # Create button box
        button_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
        button_box.set_halign(Gtk.Align.FILL)
        button_box.set_margin_start(40)
        button_box.set_margin_end(40)

        # Dismiss Forever button (left)
        dismiss_button = Gtk.Button(label="Dismiss Forever")
        dismiss_button.connect("clicked", self.on_dismiss_forever)
        dismiss_button.set_halign(Gtk.Align.START)
        button_box.pack_start(dismiss_button, False, False, 0)

        # Spacer
        spacer = Gtk.Box()
        button_box.pack_start(spacer, True, True, 0)

        # Close button (right)
        close_button = Gtk.Button(label="Close")
        close_button.connect("clicked", self.on_close)
        close_button.set_halign(Gtk.Align.END)
        button_box.pack_start(close_button, False, False, 0)

        container.pack_start(button_box, False, False, 0)

    def on_dismiss_forever(self, button):
        # Create config directory if it doesn't exist
        config_dir = os.path.expanduser("~/.config/archriot")
        os.makedirs(config_dir, exist_ok=True)

        # Write welcome.json to indicate welcome has been dismissed
        welcome_config = {
            "dismissed": True,
            "timestamp": GLib.get_real_time()
        }

        config_file = os.path.join(config_dir, "welcome.json")
        try:
            with open(config_file, 'w') as f:
                json.dump(welcome_config, f, indent=2)
            print("Welcome dismissed forever")
        except Exception as e:
            print(f"Error saving welcome config: {e}")

        Gtk.main_quit()

    def on_close(self, button):
        Gtk.main_quit()

    def on_text_clicked(self, text_view, event):
        """Handle clicks on text view to open links"""
        if event.button == 1:  # Left click
            x, y = text_view.window_to_buffer_coords(Gtk.TextWindowType.WIDGET, int(event.x), int(event.y))
            iter_result = text_view.get_iter_at_location(x, y)

            if iter_result[0]:  # Check if location was found
                iter_pos = iter_result[1]
                tags = iter_pos.get_tags()

                for tag in tags:
                    if hasattr(tag, 'get_property'):
                        tag_name = tag.get_property('name')
                        if tag_name == "twitter_link":
                            os.system("xdg-open https://x.com/CyphrRiot &")
                            return True
                        elif tag_name == "github_link":
                            os.system("xdg-open https://github.com/CyphrRiot/ArchRiot &")
                            return True

        return False

    def get_archriot_version(self):
        """Read ArchRiot version from VERSION file"""
        home_dir = os.environ.get('HOME') or os.path.expanduser('~')
        version_path = os.path.join(home_dir, '.local', 'share', 'archriot', 'VERSION')

        try:
            with open(version_path, 'r') as f:
                version = f.read().strip()
                return version
        except Exception as e:
            print(f"Could not read version file: {e}")
            return "unknown"

    def on_window_destroy(self, widget):
        """Handle window destruction - quit this app's main loop only"""
        Gtk.main_quit()

def should_show_welcome():
    """Check if welcome should be shown"""
    config_file = os.path.expanduser("~/.config/archriot/welcome.json")

    if not os.path.exists(config_file):
        return True

    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
        return not config.get("dismissed", False)
    except:
        return True

def main():
    if len(sys.argv) > 1 and sys.argv[1] == "--force":
        # Force show welcome even if dismissed
        pass
    elif not should_show_welcome():
        print("Welcome has been dismissed")
        return

    # Set up CSS for styling
    css_provider = Gtk.CssProvider()
    css_data = """
    * {
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    window {
        background: rgba(0, 0, 0, 0.7);
        color: #cdd6f4;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    label {
        color: #cdd6f4;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    textview {
        background: rgba(0, 0, 0, 0.7);
        color: #cdd6f4;
        border: none;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    textview text {
        background: rgba(0, 0, 0, 0.7);
        color: #cdd6f4;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    button {
        background: rgba(75, 0, 130, 1.0);
        color: #ffffff;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-weight: bold;
        min-width: 100px;
        min-height: 32px;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    button:hover {
        background: rgba(102, 51, 153, 1.0);
    }

    scrolledwindow {
        border: none;
        background: rgba(0, 0, 0, 0.7);
    }
    """

    css_provider.load_from_data(css_data.encode())

    # Apply CSS to default screen
    screen = Gdk.Screen.get_default()
    Gtk.StyleContext.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    WelcomeWindow()

    # Run the main loop - this keeps the window alive
    Gtk.main()

if __name__ == "__main__":
    main()
