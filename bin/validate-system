#!/bin/bash

# =============================================================================
# ArchRiot System Validation Script
# Validates all fixes and system components are working correctly
# =============================================================================

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Counters
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0
WARNING_TESTS=0

# Test result tracking
declare -a FAILED_TEST_NAMES=()
declare -a WARNING_TEST_NAMES=()

# Helper functions
print_header() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}"
}

print_test() {
    echo -e "\n${YELLOW}Testing: $1${NC}"
    ((TOTAL_TESTS++))
}

test_pass() {
    echo -e "${GREEN}✓ PASS: $1${NC}"
    ((PASSED_TESTS++))
}

test_fail() {
    echo -e "${RED}✗ FAIL: $1${NC}"
    ((FAILED_TESTS++))
    FAILED_TEST_NAMES+=("$1")
}

test_warn() {
    echo -e "${YELLOW}⚠ WARN: $1${NC}"
    ((WARNING_TESTS++))
    WARNING_TEST_NAMES+=("$1")
}

# Test functions
test_specialty_installation() {
    print_test "Specialty packages installation"

    if [[ -f ~/.local/share/archriot/install/lib/shared.sh ]]; then
        test_pass "shared.sh library exists"
    else
        test_fail "shared.sh library missing"
    fi
}

test_background_system() {
    print_test "Background system configuration"

    # Check current theme
    if [[ -L ~/.config/archriot/current/theme ]]; then
        local theme=$(basename "$(readlink ~/.config/archriot/current/theme)")
        test_pass "Active theme: $theme"
    else
        test_fail "No active theme set"
        return
    fi

    # Check background link
    if [[ -L ~/.config/archriot/current/background ]]; then
        local bg_file=$(readlink ~/.config/archriot/current/background)
        local bg_name=$(basename "$bg_file")

        # Check if it's riot_zero (preferred default)
        if [[ "$bg_name" == *"riot_zero"* ]]; then
            test_pass "Default background is riot_zero: $bg_name"
        else
            test_warn "Background is not riot_zero: $bg_name"
        fi

        # Check if file exists
        if [[ -f "$bg_file" ]]; then
            test_pass "Background file exists and accessible"
        else
            test_fail "Background file missing: $bg_file"
        fi
    else
        test_fail "No background configured"
    fi

    # Check background rotation
    if [[ -x ~/.local/bin/swaybg-next ]]; then
        test_pass "Background rotation script exists"
    else
        test_fail "Background rotation script missing"
    fi
}

test_waybar_configuration() {
    print_test "Waybar configuration and theming"

    # Check waybar config
    if [[ -f ~/.config/waybar/config ]]; then
        test_pass "Waybar config exists"
    else
        test_fail "Waybar config missing"
    fi

    # Check waybar CSS
    if [[ -f ~/.config/waybar/style.css ]]; then
        test_pass "Waybar CSS exists"

        # Check for CSS syntax issues
        if grep -q "!important" ~/.config/waybar/style.css; then
            test_warn "Waybar CSS contains !important (not supported by waybar)"
        else
            test_pass "Waybar CSS has no !important declarations"
        fi
    else
        test_fail "Waybar CSS missing"
    fi

    # Check if waybar is running
    if pgrep waybar >/dev/null; then
        test_pass "Waybar is running"
    else
        test_warn "Waybar is not running"
    fi

    # Check waybar scripts
    local script_count=$(find ~/.local/bin -name "waybar-*.py" -executable 2>/dev/null | wc -l)
    if [[ $script_count -ge 4 ]]; then
        test_pass "Waybar scripts installed ($script_count found)"
    else
        test_fail "Missing waybar scripts (found $script_count, expected 4+)"
    fi
}

test_tomato_timer() {
    print_test "Tomato timer functionality"

    if [[ -x ~/.local/bin/waybar-tomato.py ]]; then
        test_pass "Tomato timer script exists"

        # Check for Python syntax
        if python3 -m py_compile ~/.local/bin/waybar-tomato.py 2>/dev/null; then
            test_pass "Tomato timer script syntax is valid"
        else
            test_fail "Tomato timer script has syntax errors"
        fi

        # Check for type checker issues
        if command -v mypy >/dev/null; then
            if mypy ~/.local/bin/waybar-tomato.py 2>/dev/null; then
                test_pass "Tomato timer passes type checking"
            else
                test_warn "Tomato timer has type checker warnings"
            fi
        fi
    else
        test_fail "Tomato timer script missing"
    fi
}

test_thunar_thumbnails() {
    print_test "Thunar thumbnail configuration"

    # Check tumbler installation
    if command -v tumblerd >/dev/null; then
        test_pass "Tumbler is installed"
    else
        test_fail "Tumbler is not installed"
    fi

    # Check thumbnail packages
    local missing_packages=()
    for pkg in tumbler ffmpegthumbnailer poppler-glib libgsf raw-thumbnailer libgepub; do
        if ! pacman -Qi "$pkg" >/dev/null 2>&1; then
            missing_packages+=("$pkg")
        fi
    done

    if [[ ${#missing_packages[@]} -eq 0 ]]; then
        test_pass "All thumbnail packages installed"
    else
        test_fail "Missing thumbnail packages: ${missing_packages[*]}"
    fi

    # Check PDF thumbnails are disabled
    if [[ -f /usr/share/thumbnailers/evince.thumbnailer ]]; then
        test_fail "PDF thumbnails not disabled (evince.thumbnailer active)"
    else
        test_pass "PDF thumbnails disabled (evince.thumbnailer disabled)"
    fi

    # Check for other PDF thumbnailers
    local pdf_thumbnailers=$(find /usr/share/thumbnailers -name "*pdf*" -not -name "*.disabled" 2>/dev/null | wc -l)
    if [[ $pdf_thumbnailers -eq 0 ]]; then
        test_pass "No active PDF thumbnailers found"
    else
        test_warn "Found $pdf_thumbnailers active PDF thumbnailers"
    fi
}

test_terminal_configuration() {
    print_test "Terminal configuration"

    # Check ghostty config
    if [[ -f ~/.config/ghostty/config ]]; then
        test_pass "Ghostty config exists"

        # Check background color
        if grep -q "background.*=" ~/.config/ghostty/config; then
            test_pass "Ghostty has background color configured"
        else
            test_warn "Ghostty background may not be optimal"
        fi
    else
        test_fail "Ghostty config missing"
    fi
}

test_sudo_configuration() {
    print_test "Sudo configuration"

    # Test passwordless sudo
    if sudo -n true 2>/dev/null; then
        test_pass "Passwordless sudo is working"
    else
        test_warn "Sudo requires password (may be intentional)"
    fi
}

test_theme_system() {
    print_test "Theme system integrity"

    # Check theme directories
    if [[ -d ~/.config/archriot/themes ]]; then
        local theme_count=$(find ~/.config/archriot/themes -maxdepth 1 -type d | wc -l)
        if [[ $theme_count -gt 1 ]]; then  # More than just the themes directory itself
            test_pass "Theme system configured ($((theme_count-1)) themes available)"
        else
            test_fail "No themes found in theme directory"
        fi
    else
        test_fail "Theme system not initialized"
    fi

    # Check theme switching scripts
    if [[ -x ~/.local/share/archriot/bin/theme-next ]]; then
        test_pass "Theme switching script exists"
    else
        test_fail "Theme switching script missing"
    fi
}

test_keyboard_shortcuts() {
    print_test "Keyboard shortcuts and scripts"

    # Check background rotation script
    if [[ -x ~/.local/bin/swaybg-next ]]; then
        test_pass "Background rotation script (SUPER+CTRL+SPACE) exists"

        # Check if it can follow symlinks (the fix)
        if grep -q "\-L" ~/.local/bin/swaybg-next; then
            test_pass "Background rotation script has symlink fix"
        else
            test_warn "Background rotation script may not follow symlinks"
        fi
    else
        test_fail "Background rotation script missing"
    fi
}

test_system_services() {
    print_test "System services and processes"

    # Check critical services
    if pgrep swaybg >/dev/null; then
        test_pass "Background service (swaybg) is running"
    else
        test_warn "Background service is not running"
    fi

    if pgrep hyprland >/dev/null; then
        test_pass "Hyprland window manager is running"
    else
        test_warn "Hyprland is not running (may not be in Hyprland session)"
    fi
}

test_fix_scripts() {
    print_test "Fix scripts availability"

    local fix_scripts=(
        "fix-thunar-thumbnails"
        "fix-background"
        "fix-waybar-theme"
    )

    for script in "${fix_scripts[@]}"; do
        if [[ -x ~/.local/share/archriot/bin/$script ]]; then
            test_pass "$script is available"
        else
            test_fail "$script is missing"
        fi
    done
}

# Main execution
main() {
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    ArchRiot System Validation                ║"
    echo "║              Comprehensive System Health Check               ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"

    echo "Starting validation at: $(date)"
    echo "User: $(whoami)"
    echo "Session: ${XDG_SESSION_TYPE:-unknown}"

    # Run all tests
    print_header "Testing Core Installation"
    test_specialty_installation

    print_header "Testing Background System"
    test_background_system

    print_header "Testing Waybar Configuration"
    test_waybar_configuration

    print_header "Testing Tomato Timer"
    test_tomato_timer

    print_header "Testing Thunar Thumbnails"
    test_thunar_thumbnails

    print_header "Testing Terminal Configuration"
    test_terminal_configuration

    print_header "Testing Sudo Configuration"
    test_sudo_configuration

    print_header "Testing Theme System"
    test_theme_system

    print_header "Testing Keyboard Shortcuts"
    test_keyboard_shortcuts

    print_header "Testing System Services"
    test_system_services

    print_header "Testing Fix Scripts"
    test_fix_scripts

    # Summary
    print_header "VALIDATION SUMMARY"

    echo -e "Total tests run: ${BLUE}$TOTAL_TESTS${NC}"
    echo -e "Passed: ${GREEN}$PASSED_TESTS${NC}"
    echo -e "Failed: ${RED}$FAILED_TESTS${NC}"
    echo -e "Warnings: ${YELLOW}$WARNING_TESTS${NC}"

    if [[ $FAILED_TESTS -gt 0 ]]; then
        echo -e "\n${RED}Failed Tests:${NC}"
        for test in "${FAILED_TEST_NAMES[@]}"; do
            echo -e "  ${RED}• $test${NC}"
        done
    fi

    if [[ $WARNING_TESTS -gt 0 ]]; then
        echo -e "\n${YELLOW}Warnings:${NC}"
        for test in "${WARNING_TEST_NAMES[@]}"; do
            echo -e "  ${YELLOW}• $test${NC}"
        done
    fi

    echo -e "\nValidation completed at: $(date)"

    # Exit code based on results
    if [[ $FAILED_TESTS -eq 0 ]]; then
        echo -e "\n${GREEN}🎉 System validation PASSED! All critical components working correctly.${NC}"
        exit 0
    else
        echo -e "\n${RED}❌ System validation FAILED! $FAILED_TESTS critical issues found.${NC}"
        exit 1
    fi
}

# Execute main function
main "$@"
