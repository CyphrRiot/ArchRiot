#!/bin/bash

# ArchRiot Startup Profiler
# Analyzes boot times, login performance, and application startup speeds

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
REPORT_FILE="/tmp/startup-profiler-$(date +%Y%m%d-%H%M%S).txt"
APP_TEST_COUNT=3

print_header() {
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                ArchRiot Startup Profiler                    ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}🚀 Analyzing system startup performance and identifying bottlenecks${NC}"
    echo -e "${CYAN}📄 Report will be saved to: $REPORT_FILE${NC}"
    echo ""
}

log_to_file() {
    echo "$1" | tee -a "$REPORT_FILE"
}

section_header() {
    local title="$1"
    echo "" | tee -a "$REPORT_FILE"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}" | tee -a "$REPORT_FILE"
    echo -e "${BLUE} $title${NC}" | tee -a "$REPORT_FILE"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
}

subsection_header() {
    local title="$1"
    echo "" | tee -a "$REPORT_FILE"
    echo -e "${YELLOW}──── $title ────${NC}" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
}

analyze_boot_performance() {
    section_header "⚡ BOOT PERFORMANCE ANALYSIS"

    if command -v systemd-analyze >/dev/null 2>&1; then
        subsection_header "Boot Timeline Summary"
        if systemd-analyze >/dev/null 2>&1; then
            systemd-analyze | tee -a "$REPORT_FILE"
            echo "" | tee -a "$REPORT_FILE"

            # Extract boot time
            local total_time=$(systemd-analyze | grep "Startup finished" | sed -n 's/.*= \([0-9.]*\)s$/\1/p')
            if [[ -n "$total_time" ]]; then
                if (( $(echo "$total_time > 60" | bc -l 2>/dev/null || echo 0) )); then
                    echo -e "${RED}🔴 SLOW: Boot time ${total_time}s is longer than 60s${NC}" | tee -a "$REPORT_FILE"
                elif (( $(echo "$total_time > 30" | bc -l 2>/dev/null || echo 0) )); then
                    echo -e "${YELLOW}🟡 MODERATE: Boot time ${total_time}s could be improved${NC}" | tee -a "$REPORT_FILE"
                else
                    echo -e "${GREEN}✅ FAST: Boot time ${total_time}s is good${NC}" | tee -a "$REPORT_FILE"
                fi
            fi
        else
            echo "⚠ Boot time analysis not available in this environment" | tee -a "$REPORT_FILE"
        fi

        subsection_header "Critical Chain Analysis"
        if systemd-analyze critical-chain 2>/dev/null >/dev/null; then
            echo "Services on the critical path (causing boot delays):" | tee -a "$REPORT_FILE"
            systemd-analyze critical-chain 2>/dev/null | head -15 | tee -a "$REPORT_FILE"
        else
            echo "Critical chain analysis not available" | tee -a "$REPORT_FILE"
        fi

        subsection_header "Slowest Services (Top 15)"
        if systemd-analyze blame 2>/dev/null >/dev/null; then
            echo "Services taking the most time to start:" | tee -a "$REPORT_FILE"
            systemd-analyze blame 2>/dev/null | head -15 | tee -a "$REPORT_FILE"
        else
            echo "Service blame analysis not available" | tee -a "$REPORT_FILE"
        fi

        subsection_header "Failed Services Check"
        local failed_count=$(systemctl --failed --no-pager 2>/dev/null | grep -c "●" || echo "0")
        if [[ $failed_count -gt 0 ]]; then
            echo -e "${RED}❌ $failed_count failed services detected (may slow boot):${NC}" | tee -a "$REPORT_FILE"
            systemctl --failed --no-pager 2>/dev/null | tee -a "$REPORT_FILE"
        else
            echo -e "${GREEN}✅ No failed services detected${NC}" | tee -a "$REPORT_FILE"
        fi
    else
        echo "systemd-analyze not available - cannot analyze boot performance" | tee -a "$REPORT_FILE"
    fi
}

analyze_shell_startup() {
    section_header "🐚 SHELL STARTUP PERFORMANCE"

    subsection_header "Bash Startup Time"
    if [[ -f "$HOME/.bashrc" ]]; then
        echo "Testing bash startup performance..." | tee -a "$REPORT_FILE"
        local bash_times=()

        for i in {1..3}; do
            local start_time=$(date +%s.%N)
            bash -c "source ~/.bashrc; exit" 2>/dev/null
            local end_time=$(date +%s.%N)
            local elapsed=$(echo "$end_time - $start_time" | bc)
            bash_times+=("$elapsed")
            echo "  Run $i: ${elapsed}s" | tee -a "$REPORT_FILE"
        done

        # Calculate average
        local total=0
        for time in "${bash_times[@]}"; do
            total=$(echo "$total + $time" | bc)
        done
        local avg=$(echo "scale=3; $total / ${#bash_times[@]}" | bc)
        echo "  Average bash startup: ${avg}s" | tee -a "$REPORT_FILE"

        if (( $(echo "$avg > 2.0" | bc -l) )); then
            echo -e "${RED}🔴 SLOW: Bash startup is slower than 2s${NC}" | tee -a "$REPORT_FILE"
        elif (( $(echo "$avg > 1.0" | bc -l) )); then
            echo -e "${YELLOW}🟡 MODERATE: Bash startup could be optimized${NC}" | tee -a "$REPORT_FILE"
        else
            echo -e "${GREEN}✅ FAST: Bash startup time is good${NC}" | tee -a "$REPORT_FILE"
        fi
    else
        echo "No ~/.bashrc found" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Fish Startup Time"
    if command -v fish >/dev/null 2>&1; then
        echo "Testing fish startup performance..." | tee -a "$REPORT_FILE"
        local fish_times=()

        for i in {1..3}; do
            local start_time=$(date +%s.%N)
            fish -c "exit" 2>/dev/null
            local end_time=$(date +%s.%N)
            local elapsed=$(echo "$end_time - $start_time" | bc)
            fish_times+=("$elapsed")
            echo "  Run $i: ${elapsed}s" | tee -a "$REPORT_FILE"
        done

        # Calculate average
        local total=0
        for time in "${fish_times[@]}"; do
            total=$(echo "$total + $time" | bc)
        done
        local avg=$(echo "scale=3; $total / ${#fish_times[@]}" | bc)
        echo "  Average fish startup: ${avg}s" | tee -a "$REPORT_FILE"

        if (( $(echo "$avg > 1.0" | bc -l) )); then
            echo -e "${YELLOW}🟡 Fish startup could be optimized${NC}" | tee -a "$REPORT_FILE"
        else
            echo -e "${GREEN}✅ Fish startup time is good${NC}" | tee -a "$REPORT_FILE"
        fi
    else
        echo "Fish shell not installed" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Shell Configuration Analysis"
    if [[ -f "$HOME/.bashrc" ]]; then
        local bashrc_lines=$(wc -l < "$HOME/.bashrc")
        echo "~/.bashrc: $bashrc_lines lines" | tee -a "$REPORT_FILE"

        if [[ $bashrc_lines -gt 200 ]]; then
            echo -e "${YELLOW}⚠ Large bashrc file may slow startup${NC}" | tee -a "$REPORT_FILE"
        fi
    fi

    if [[ -f "$HOME/.config/fish/config.fish" ]]; then
        local fish_lines=$(wc -l < "$HOME/.config/fish/config.fish")
        echo "Fish config: $fish_lines lines" | tee -a "$REPORT_FILE"

        if [[ $fish_lines -gt 100 ]]; then
            echo -e "${YELLOW}⚠ Large fish config may slow startup${NC}" | tee -a "$REPORT_FILE"
        fi
    fi
}

analyze_desktop_startup() {
    section_header "🖥️ DESKTOP ENVIRONMENT STARTUP"

    subsection_header "Hyprland Startup"
    echo "Analyzing Hyprland configuration..." | tee -a "$REPORT_FILE"

    if [[ -f "$HOME/.config/hypr/hyprland.conf" ]]; then
        local hypr_lines=$(wc -l < "$HOME/.config/hypr/hyprland.conf")
        echo "Hyprland config: $hypr_lines lines" | tee -a "$REPORT_FILE"

        # Check for autostart applications
        local autostart_count=$(grep -c "^exec-once" "$HOME/.config/hypr/hyprland.conf" 2>/dev/null || echo "0")
        echo "Autostart applications: $autostart_count" | tee -a "$REPORT_FILE"

        if [[ $autostart_count -gt 10 ]]; then
            echo -e "${YELLOW}⚠ Many autostart apps may slow desktop startup${NC}" | tee -a "$REPORT_FILE"
        fi

        echo "Autostart applications:" | tee -a "$REPORT_FILE"
        grep "^exec-once" "$HOME/.config/hypr/hyprland.conf" 2>/dev/null | sed 's/exec-once = /  - /' | tee -a "$REPORT_FILE" || echo "  None found" | tee -a "$REPORT_FILE"
    else
        echo "Hyprland config not found" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Waybar Startup"
    if command -v waybar >/dev/null 2>&1; then
        echo "Testing waybar startup..." | tee -a "$REPORT_FILE"

        # Check waybar config complexity
        if [[ -f "$HOME/.config/waybar/config" ]]; then
            local modules_count=$(grep -o '"[^"]*"[[:space:]]*,' "$HOME/.config/waybar/config" | wc -l)
            echo "Waybar modules configured: $modules_count" | tee -a "$REPORT_FILE"

            if [[ $modules_count -gt 20 ]]; then
                echo -e "${YELLOW}⚠ Many waybar modules may impact performance${NC}" | tee -a "$REPORT_FILE"
            fi
        fi

        # Test waybar startup time
        local start_time=$(date +%s.%N)
        timeout 10s waybar --config ~/.config/waybar/config --style ~/.config/waybar/style.css &
        local waybar_pid=$!
        sleep 2
        kill $waybar_pid 2>/dev/null || true
        local end_time=$(date +%s.%N)
        local elapsed=$(echo "$end_time - $start_time" | bc)
        echo "Waybar startup test: ${elapsed}s" | tee -a "$REPORT_FILE"
    else
        echo "Waybar not installed" | tee -a "$REPORT_FILE"
    fi
}

analyze_application_startup() {
    section_header "📱 APPLICATION STARTUP PERFORMANCE"

    subsection_header "Terminal Applications"

    # Test ghostty startup
    if command -v ghostty >/dev/null 2>&1; then
        echo "Testing ghostty startup..." | tee -a "$REPORT_FILE"
        local ghostty_times=()

        for i in $(seq 1 $APP_TEST_COUNT); do
            local start_time=$(date +%s.%N)
            timeout 5s ghostty -e "echo 'test'; exit" >/dev/null 2>&1 &
            local ghostty_pid=$!
            sleep 1
            kill $ghostty_pid 2>/dev/null || true
            local end_time=$(date +%s.%N)
            local elapsed=$(echo "$end_time - $start_time" | bc)
            ghostty_times+=("$elapsed")
            echo "  Run $i: ${elapsed}s" | tee -a "$REPORT_FILE"
        done

        # Calculate average
        local total=0
        for time in "${ghostty_times[@]}"; do
            total=$(echo "$total + $time" | bc)
        done
        local avg=$(echo "scale=3; $total / ${#ghostty_times[@]}" | bc)
        echo "  Average ghostty startup: ${avg}s" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Launcher Applications"

    # Test fuzzel startup
    if command -v fuzzel >/dev/null 2>&1; then
        echo "Testing fuzzel startup..." | tee -a "$REPORT_FILE"
        local start_time=$(date +%s.%N)
        timeout 3s fuzzel --help >/dev/null 2>&1
        local end_time=$(date +%s.%N)
        local elapsed=$(echo "$end_time - $start_time" | bc)
        echo "Fuzzel help response: ${elapsed}s" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Editor Applications"

    # Test editors
    for editor in nvim code zed; do
        if command -v "$editor" >/dev/null 2>&1; then
            echo "Testing $editor startup..." | tee -a "$REPORT_FILE"
            local start_time=$(date +%s.%N)
            timeout 5s "$editor" --version >/dev/null 2>&1 || timeout 5s "$editor" --help >/dev/null 2>&1 || true
            local end_time=$(date +%s.%N)
            local elapsed=$(echo "$end_time - $start_time" | bc)
            echo "$editor version check: ${elapsed}s" | tee -a "$REPORT_FILE"
        fi
    done
}

analyze_cache_performance() {
    section_header "🗄️ CACHE PERFORMANCE ANALYSIS"

    subsection_header "Font Cache Status"
    if command -v fc-list >/dev/null 2>&1; then
        local font_count=$(fc-list | wc -l)
        echo "Fonts installed: $font_count" | tee -a "$REPORT_FILE"

        if [[ $font_count -gt 500 ]]; then
            echo -e "${YELLOW}⚠ Large number of fonts may slow application startup${NC}" | tee -a "$REPORT_FILE"
        fi

        # Test font cache rebuild time
        echo "Testing font cache rebuild..." | tee -a "$REPORT_FILE"
        local start_time=$(date +%s.%N)
        fc-cache -f >/dev/null 2>&1
        local end_time=$(date +%s.%N)
        local elapsed=$(echo "$end_time - $start_time" | bc)
        echo "Font cache rebuild: ${elapsed}s" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Icon Cache Status"
    local icon_dirs=()
    for dir in ~/.local/share/icons/* /usr/share/icons/*; do
        if [[ -d "$dir" ]]; then
            icon_dirs+=("$dir")
        fi
    done
    echo "Icon directories found: ${#icon_dirs[@]}" | tee -a "$REPORT_FILE"

    subsection_header "Desktop Database Status"
    if [[ -f "$HOME/.local/share/applications/mimeinfo.cache" ]]; then
        local mime_age=$(($(date +%s) - $(stat -c %Y "$HOME/.local/share/applications/mimeinfo.cache")))
        echo "MIME cache age: $((mime_age / 86400)) days" | tee -a "$REPORT_FILE"

        if [[ $mime_age -gt 604800 ]]; then # 1 week
            echo -e "${YELLOW}⚠ MIME cache is old, consider updating${NC}" | tee -a "$REPORT_FILE"
        fi
    fi
}

generate_startup_recommendations() {
    section_header "💡 STARTUP OPTIMIZATION RECOMMENDATIONS"

    subsection_header "High Priority Optimizations"
    echo "Based on the analysis, here are the top startup optimizations:" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"

    # Check if we found any major issues
    local recommendations=0

    # Boot time recommendations
    if command -v systemd-analyze >/dev/null 2>&1 && systemd-analyze >/dev/null 2>&1; then
        local total_time=$(systemd-analyze | grep "Startup finished" | sed -n 's/.*= \([0-9.]*\)s$/\1/p')
        if [[ -n "$total_time" ]] && (( $(echo "$total_time > 45" | bc -l 2>/dev/null || echo 0) )); then
            echo "🔴 BOOT: Boot time is ${total_time}s - investigate slow services" | tee -a "$REPORT_FILE"
            echo "   • Run: systemd-analyze critical-chain" | tee -a "$REPORT_FILE"
            echo "   • Run: systemd-analyze blame" | tee -a "$REPORT_FILE"
            ((recommendations++))
        fi
    fi

    # Shell startup recommendations
    if [[ -f "$HOME/.bashrc" ]]; then
        local bashrc_lines=$(wc -l < "$HOME/.bashrc")
        if [[ $bashrc_lines -gt 200 ]]; then
            echo "🟡 SHELL: Large bashrc ($bashrc_lines lines) may slow shell startup" | tee -a "$REPORT_FILE"
            echo "   • Consider optimizing ~/.bashrc" | tee -a "$REPORT_FILE"
            echo "   • Move heavy operations to functions called on-demand" | tee -a "$REPORT_FILE"
            ((recommendations++))
        fi
    fi

    # Autostart recommendations
    if [[ -f "$HOME/.config/hypr/hyprland.conf" ]]; then
        local autostart_count=$(grep -c "^exec-once" "$HOME/.config/hypr/hyprland.conf" 2>/dev/null || echo "0")
        if [[ $autostart_count -gt 8 ]]; then
            echo "🟡 DESKTOP: Many autostart apps ($autostart_count) may slow desktop startup" | tee -a "$REPORT_FILE"
            echo "   • Review autostart applications in hyprland.conf" | tee -a "$REPORT_FILE"
            echo "   • Delay non-essential applications" | tee -a "$REPORT_FILE"
            ((recommendations++))
        fi
    fi

    # Font recommendations
    if command -v fc-list >/dev/null 2>&1; then
        local font_count=$(fc-list | wc -l)
        if [[ $font_count -gt 500 ]]; then
            echo "🟡 FONTS: Large number of fonts ($font_count) may slow applications" | tee -a "$REPORT_FILE"
            echo "   • Consider removing unused font packages" | tee -a "$REPORT_FILE"
            echo "   • Run: fc-cache -fv to rebuild font cache" | tee -a "$REPORT_FILE"
            ((recommendations++))
        fi
    fi

    if [[ $recommendations -eq 0 ]]; then
        echo "✅ No major startup performance issues detected!" | tee -a "$REPORT_FILE"
        echo "   System appears to be well-optimized for startup performance." | tee -a "$REPORT_FILE"
    fi

    subsection_header "General Optimization Commands"
    echo "Run these commands to optimize startup performance:" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# Rebuild all caches:" | tee -a "$REPORT_FILE"
    echo "fc-cache -fv" | tee -a "$REPORT_FILE"
    echo "update-desktop-database ~/.local/share/applications/" | tee -a "$REPORT_FILE"
    echo "gtk-update-icon-cache -t ~/.local/share/icons/*" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# System optimization:" | tee -a "$REPORT_FILE"
    echo "optimize-system" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# Check for failed services:" | tee -a "$REPORT_FILE"
    echo "systemctl --failed" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# Monitor boot performance:" | tee -a "$REPORT_FILE"
    echo "systemd-analyze plot > bootchart.svg" | tee -a "$REPORT_FILE"
}

show_summary() {
    section_header "📋 STARTUP ANALYSIS SUMMARY"

    echo "System Startup Profile:" | tee -a "$REPORT_FILE"

    # Boot time summary
    if command -v systemd-analyze >/dev/null 2>&1 && systemd-analyze >/dev/null 2>&1; then
        local total_time=$(systemd-analyze | grep "Startup finished" | sed -n 's/.*= \([0-9.]*\)s$/\1/p')
        if [[ -n "$total_time" ]]; then
            echo "  Boot Time: ${total_time}s" | tee -a "$REPORT_FILE"
        fi
    fi

    # Service count
    local failed_services=$(systemctl --failed --no-pager 2>/dev/null | grep -c "●" || echo "0")
    echo "  Failed Services: $failed_services" | tee -a "$REPORT_FILE"

    # Autostart apps
    if [[ -f "$HOME/.config/hypr/hyprland.conf" ]]; then
        local autostart_count=$(grep -c "^exec-once" "$HOME/.config/hypr/hyprland.conf" 2>/dev/null || echo "0")
        echo "  Autostart Apps: $autostart_count" | tee -a "$REPORT_FILE"
    fi

    # Font count
    if command -v fc-list >/dev/null 2>&1; then
        local font_count=$(fc-list | wc -l)
        echo "  Installed Fonts: $font_count" | tee -a "$REPORT_FILE"
    fi

    echo "" | tee -a "$REPORT_FILE"
    echo -e "${GREEN}✅ Startup analysis completed successfully!${NC}" | tee -a "$REPORT_FILE"
    echo -e "${GREEN}📄 Full report saved to: $REPORT_FILE${NC}" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo -e "${YELLOW}💡 To apply optimizations, run: optimize-system${NC}" | tee -a "$REPORT_FILE"
}

main() {
    print_header

    # Initialize report file
    echo "ArchRiot Startup Profiler Report" > "$REPORT_FILE"
    echo "Generated: $(date)" >> "$REPORT_FILE"
    echo "System: $(uname -a)" >> "$REPORT_FILE"

    # Check dependencies
    if ! command -v bc >/dev/null 2>&1; then
        echo -e "${YELLOW}Installing bc for calculations...${NC}"
        sudo pacman -S --noconfirm bc 2>/dev/null || echo "Could not install bc"
    fi

    # Run analysis
    analyze_boot_performance
    analyze_shell_startup
    analyze_desktop_startup
    analyze_application_startup
    analyze_cache_performance
    generate_startup_recommendations
    show_summary
}

main "$@"
