#!/bin/bash

# Theme directories
themes_dir="$HOME/.config/archriot/themes/"
current_link="$HOME/.config/archriot/current/theme"

# Get available themes
readarray -t themes < <(find "$themes_dir" -mindepth 1 -maxdepth 1 -type d | sort)
[[ ${#themes[@]} -eq 0 ]] && { echo "No themes found"; exit 1; }

# Find current theme index
current_theme=$(readlink "$current_link" 2>/dev/null || echo "${themes[0]}")
current_index=0
for i in "${!themes[@]}"; do
    [[ "${themes[$i]}" == "$current_theme" ]] && { current_index=$i; break; }
done

# Calculate next theme
next_index=$(( (current_index + 1) % ${#themes[@]} ))
new_theme="${themes[$next_index]}"
theme_name=$(basename "$new_theme")

echo "ðŸŽ¨ Switching to theme: $theme_name"

# Update theme links
ln -nsf "$HOME/.config/archriot/backgrounds/$theme_name" "$HOME/.config/archriot/current/backgrounds"
ln -nsf "$new_theme" "$current_link"

# Set background
background=$(find "$HOME/.config/archriot/current/backgrounds/" -type f | head -n 1)
[[ -n "$background" ]] && {
    ln -nsf "$background" "$HOME/.config/archriot/current/background"
    pkill -x swaybg 2>/dev/null
    setsid swaybg -i "$HOME/.config/archriot/current/background" -m fill &
}

# Apply theme components
echo "  ðŸ“‹ Applying theme components..."

# 1. Fuzzel config
if [[ -f "$new_theme/fuzzel.ini" ]]; then
    cp "$new_theme/fuzzel.ini" "$HOME/.config/fuzzel/fuzzel.ini"
    echo "  âœ“ Applied fuzzel config"
fi

# 2. Waybar config (if theme has one)
if [[ -f "$new_theme/config" ]]; then
    cp "$new_theme/config" "$HOME/.config/waybar/config"
    echo "  âœ“ Applied waybar config"
fi

# 3. Waybar CSS (if theme has one)
if [[ -f "$new_theme/waybar.css" ]]; then
    cp "$new_theme/waybar.css" "$HOME/.config/waybar/style.css"
    echo "  âœ“ Applied waybar CSS"
fi

# 4. Editor themes
# Neovim theme
if [[ -f "$new_theme/neovim.lua" ]]; then
    mkdir -p "$HOME/.config/nvim/lua/themes"
    cp "$new_theme/neovim.lua" "$HOME/.config/nvim/lua/themes/current.lua"
    echo "  âœ“ Applied Neovim theme"
fi

# Gnome Text Editor theme
if [[ -f "$new_theme/text-editor/"*.xml ]]; then
    mkdir -p "$HOME/.local/share/gtksourceview-5/styles"
    cp "$new_theme/text-editor/"*.xml "$HOME/.local/share/gtksourceview-5/styles/"
    echo "  âœ“ Applied Text Editor theme"
fi

# 5. Application-specific configs
for config_file in ghostty.conf btop.theme hyprland.conf hyprlock.conf mako.ini; do
    if [[ -f "$new_theme/$config_file" ]]; then
        case "$config_file" in
            ghostty.conf)
                cp "$new_theme/$config_file" "$HOME/.config/ghostty/config"
                echo "  âœ“ Applied ghostty config"
                ;;
            btop.theme)
                mkdir -p "$HOME/.config/btop/themes"
                cp "$new_theme/$config_file" "$HOME/.config/btop/themes/"
                echo "  âœ“ Applied btop theme"
                ;;
            hyprland.conf)
                # Note: Don't overwrite main hyprland config, just note it's available
                echo "  â„¹ Hyprland theme config available (manual integration needed)"
                ;;
            hyprlock.conf)
                # Note: Don't overwrite main hyprlock config, just note it's available
                echo "  â„¹ Hyprlock theme config available (manual integration needed)"
                ;;
            mako.ini)
                cp "$new_theme/$config_file" "$HOME/.config/mako/config"
                echo "  âœ“ Applied mako config"
                ;;
        esac
    fi
done

# Reload components
touch "$HOME/.config/ghostty/config"  # Trigger ghostty reload
pkill -SIGUSR2 waybar 2>/dev/null
makoctl reload 2>/dev/null
hyprctl reload 2>/dev/null

# Notify user
command -v notify-send >/dev/null && notify-send "Theme: $theme_name" "All components applied" -t 3000

echo "âœ“ Theme switched to $theme_name"
echo "  ðŸ“¦ Components applied: $(find "$new_theme" -maxdepth 2 -type f -name "*.ini" -o -name "*.conf" -o -name "*.css" -o -name "*.lua" -o -name "*.xml" | wc -l) files"
