#!/bin/bash
# ArchRiot Enhanced System Upgrade Utility
# Based on original upgrade-system with key optimizations

set -e  # Exit on any error

# Parse command line arguments
CLEAN_CACHE=false
AUTO_REMOVE_ORPHANS=false
DRY_RUN=false
BACKUP=false

for arg in "$@"; do
    case $arg in
        --clean)
            CLEAN_CACHE=true
            ;;
        --auto-orphan)
            AUTO_REMOVE_ORPHANS=true
            ;;
        --all)
            CLEAN_CACHE=true
            AUTO_REMOVE_ORPHANS=true
            ;;
        --dry-run)
            DRY_RUN=true
            ;;
        --backup)
            BACKUP=true
            ;;
        --help|-h)
            echo "ArchRiot System Upgrade v2.0.0"
            echo ""
            echo "Usage: $(basename "$0") [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --clean         Clean package caches before upgrading"
            echo "  --auto-orphan   Automatically remove orphaned packages"
            echo "  --backup        Create backup before upgrade"
            echo "  --all           Enable all automation flags"
            echo "  --dry-run       Show what would be updated"
            echo "  --help, -h      Show this help message"
            exit 0
            ;;
    esac
done

# Colors (ArchRiot theme)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
BOLD='\033[1m'
RESET='\033[0m'

# Banner function
banner() {
    local color=$1
    local message=$2
    echo
    echo -e "${color}${BOLD}======================================${RESET}"
    echo -e "${color}${BOLD}  $message${RESET}"
    echo -e "${color}${BOLD}======================================${RESET}"
    echo
}

# Confirmation function
confirm() {
    local message=$1
    echo -e "${YELLOW}${BOLD}$message [y/N]${RESET} "
    read -r response
    case "$response" in
        [yY][eE][sS]|[yY]) return 0 ;;
        *) return 1 ;;
    esac
}

# Plymouth theme backup and restore functions
backup_plymouth_theme() {
    if command -v plymouth-set-default-theme &> /dev/null; then
        local current_theme=$(sudo plymouth-set-default-theme 2>/dev/null || echo "none")
        if [[ "$current_theme" == "archriot" && -d "/usr/share/plymouth/themes/archriot" ]]; then
            echo -e "${BLUE}Backing up ArchRiot Plymouth theme...${RESET}"
            mkdir -p ~/.cache/archriot/upgrade-backup
            sudo cp -r /usr/share/plymouth/themes/archriot ~/.cache/archriot/upgrade-backup/ 2>/dev/null || true
            echo "$current_theme" > ~/.cache/archriot/upgrade-backup/plymouth_theme.txt
            echo -e "${GREEN}✓ Plymouth theme backed up${RESET}"
        fi
    fi
}

restore_plymouth_theme() {
    if [[ -d ~/.cache/archriot/upgrade-backup/archriot && -f ~/.cache/archriot/upgrade-backup/plymouth_theme.txt ]]; then
        local backed_up_theme=$(cat ~/.cache/archriot/upgrade-backup/plymouth_theme.txt 2>/dev/null || echo "none")
        if [[ "$backed_up_theme" == "archriot" ]]; then
            echo -e "${BLUE}Restoring ArchRiot Plymouth theme...${RESET}"
            sudo mkdir -p /usr/share/plymouth/themes/archriot
            sudo cp -r ~/.cache/archriot/upgrade-backup/archriot/* /usr/share/plymouth/themes/archriot/ 2>/dev/null || true

            # Restore theme setting and rebuild initramfs
            if sudo plymouth-set-default-theme -R archriot &>/dev/null; then
                echo -e "${GREEN}✓ ArchRiot Plymouth theme restored${RESET}"
            else
                echo -e "${YELLOW}⚠ Plymouth theme files restored but theme setting failed${RESET}"
            fi

            # Clean up backup (sudo required since files were copied with sudo)
            sudo rm -rf ~/.cache/archriot/upgrade-backup/archriot ~/.cache/archriot/upgrade-backup/plymouth_theme.txt
        fi
    fi
}

# Start
banner "${PURPLE}" "ARCHRIOT SYSTEM UPGRADE v2.0.0"

# Create backup if requested
if [ "$BACKUP" = true ]; then
    banner "${BLUE}" "CREATING BACKUP"
    if [ "$DRY_RUN" = true ]; then
        echo "DRY RUN: Would create system backup"
    elif command -v migrate-backup &> /dev/null; then
        echo "Creating ArchRiot backup..."
        migrate-backup "pre-upgrade-$(date +%Y%m%d-%H%M%S)"
    else
        echo "Creating package list backup..."
        mkdir -p ~/.local/share/archriot/logs
        pacman -Qqe > ~/.local/share/archriot/logs/installed-packages-$(date +%Y%m%d-%H%M%S).txt
        echo "Package list saved"
    fi
fi

# Always backup Plymouth theme before upgrades
backup_plymouth_theme

# Step 1: Clean package caches
banner "${BLUE}" "STEP 1: CLEAN PACKAGE CACHES"
if [ "$CLEAN_CACHE" = true ]; then
    if [ "$DRY_RUN" = true ]; then
        echo "DRY RUN: Would clean pacman and yay caches"
    else
        echo "Cleaning pacman cache..."
        sudo pacman -Sc --noconfirm || true
        if command -v yay &> /dev/null; then
            echo "Cleaning yay cache..."
            yay -Sc --noconfirm || true
        fi
    fi
    echo -e "${GREEN}Cache cleaning completed.${RESET}"
else
    echo -e "${YELLOW}Skipping cache cleaning (use --clean flag to enable).${RESET}"
fi

# Step 2: Update package databases
banner "${MAGENTA}" "STEP 2: UPDATE PACKAGE DATABASES"
if [ "$DRY_RUN" = true ]; then
    echo "DRY RUN: Would update package databases"
else
    echo "Updating package databases..."
    sudo pacman -Sy --noconfirm
fi

# Step 3: Check for updates
banner "${GREEN}" "STEP 3: CHECK FOR UPDATES"

PACMAN_UPDATES=$(pacman -Qu 2>/dev/null | wc -l)
echo -e "${GREEN}Pacman updates available: ${BOLD}$PACMAN_UPDATES${RESET}"

if [ "$PACMAN_UPDATES" -gt 0 ]; then
    echo -e "${CYAN}${BOLD}Official packages to be updated:${RESET}"
    pacman -Qu 2>/dev/null | head -20 | while read -r line; do
        if [ -n "$line" ]; then
            package=$(echo "$line" | awk '{print $1}')
            old_version=$(echo "$line" | awk '{print $2}')
            new_version=$(echo "$line" | awk '{print $4}')
            echo -e "  ${YELLOW}•${RESET} $package: ${RED}$old_version${RESET} → ${GREEN}$new_version${RESET}"
        fi
    done
    [ "$PACMAN_UPDATES" -gt 20 ] && echo "  ... and $((PACMAN_UPDATES - 20)) more"
    echo
fi

# Check AUR updates
if command -v yay &> /dev/null; then
    AUR_UPDATES=$(yay -Qua 2>/dev/null | wc -l)
    echo -e "${GREEN}AUR updates available: ${BOLD}$AUR_UPDATES${RESET}"

    if [ "$AUR_UPDATES" -gt 0 ]; then
        echo -e "${CYAN}${BOLD}AUR packages to be updated:${RESET}"
        yay -Qua 2>/dev/null | head -10 | while read -r line; do
            if [ -n "$line" ]; then
                package=$(echo "$line" | awk '{print $1}')
                old_version=$(echo "$line" | awk '{print $2}')
                new_version=$(echo "$line" | awk '{print $4}')
                echo -e "  ${YELLOW}•${RESET} $package: ${RED}$old_version${RESET} → ${GREEN}$new_version${RESET}"
            fi
        done
        [ "$AUR_UPDATES" -gt 10 ] && echo "  ... and $((AUR_UPDATES - 10)) more"
        echo
    fi
else
    AUR_UPDATES=0
fi

# Step 4: Perform upgrade
banner "${GREEN}" "STEP 4: SYSTEM UPGRADE"

if [ "$PACMAN_UPDATES" -gt 0 ] || [ "$AUR_UPDATES" -gt 0 ]; then
    if [ "$DRY_RUN" = true ]; then
        echo "DRY RUN: Would upgrade $PACMAN_UPDATES official and $AUR_UPDATES AUR packages"
    else
        echo -e "${YELLOW}${BOLD}Proceed with system upgrade? [Y/n]${RESET} "
        read -r response
        case "$response" in
            [nN][oO]|[nN])
                echo -e "${YELLOW}System upgrade skipped.${RESET}"
                ;;
            *)
                if [ "$PACMAN_UPDATES" -gt 0 ]; then
                    echo "Upgrading official packages..."
                    if sudo pacman -Su --noconfirm; then
                        echo -e "${GREEN}✅ Official packages upgraded!${RESET}"
                    else
                        echo -e "${YELLOW}⚠️ Some packages failed. Cleaning cache and retrying...${RESET}"
                        sudo rm -f /var/cache/pacman/pkg/*.part 2>/dev/null || true
                        sudo pacman -Su --noconfirm
                    fi
                fi

                if [ "$AUR_UPDATES" -gt 0 ] && command -v yay &> /dev/null; then
                    echo "Upgrading AUR packages..."
                    yay -Su --noconfirm
                fi

                echo -e "${GREEN}${BOLD}System upgrade completed!${RESET}"

                # Restore Plymouth theme after upgrade
                restore_plymouth_theme
                ;;
        esac
    fi
else
    echo -e "${GREEN}${BOLD}System is up to date!${RESET}"
fi

# Step 5: Clean orphans
banner "${BLUE}" "STEP 5: CLEANUP ORPHANED PACKAGES"

ORPHANS=$(pacman -Qtdq 2>/dev/null | wc -l || echo 0)
if [ "$ORPHANS" -gt 0 ]; then
    echo -e "${BLUE}Found ${BOLD}$ORPHANS${RESET}${BLUE} orphaned packages${RESET}"

    if [ "$DRY_RUN" = true ]; then
        echo "DRY RUN: Would remove $ORPHANS orphaned packages"
    elif [ "$AUTO_REMOVE_ORPHANS" = true ]; then
        echo "Auto-removing orphaned packages..."
        sudo pacman -Rns $(pacman -Qtdq) --noconfirm 2>/dev/null || true
        echo -e "${GREEN}Orphaned packages removed.${RESET}"
    elif confirm "Remove orphaned packages?"; then
        sudo pacman -Rns $(pacman -Qtdq) --noconfirm 2>/dev/null || true
        echo -e "${GREEN}Orphaned packages removed.${RESET}"
    else
        echo -e "${YELLOW}Keeping orphaned packages.${RESET}"
    fi
else
    echo -e "${GREEN}No orphaned packages found.${RESET}"
fi

# Completion
banner "${CYAN}" "UPGRADE PROCESS COMPLETE"
echo -e "${GREEN}${BOLD}All operations completed successfully!${RESET}"

# Send notification if available
if command -v notify-send &> /dev/null && [ -n "${WAYLAND_DISPLAY:-}${DISPLAY:-}" ]; then
    notify-send "ArchRiot" "System upgrade completed" --icon=system-software-update
fi
