#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gtk, Gdk, GLib, Pango  # type: ignore
import os
import json
import subprocess
import sys

class UpdateDialog:
    def __init__(self):
        # Get version information from environment variables
        self.local_version = os.environ.get('ARCHRIOT_LOCAL_VERSION', 'unknown')
        self.remote_version = os.environ.get('ARCHRIOT_REMOTE_VERSION', 'unknown')

        self.home_dir = os.path.expanduser('~')
        self.config_dir = os.path.join(self.home_dir, '.config', 'archriot')
        self.config_file = os.path.join(self.config_dir, 'versions.cfg')
        self.lock_file = "/tmp/archriot_upgrade.lock"

        # Create lock file
        self.create_lock_file()

        self.window = Gtk.Window()
        self.window.set_title("ArchRiot Update Available")
        self.window.set_default_size(600, 400)
        self.window.set_position(Gtk.WindowPosition.CENTER)
        self.window.set_resizable(False)

        # Make window modal and keep above
        self.window.set_modal(True)
        self.window.set_keep_above(True)
        self.window.set_type_hint(Gdk.WindowTypeHint.DIALOG)

        # Create main container
        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=20)
        main_box.set_margin_start(40)
        main_box.set_margin_end(40)
        main_box.set_margin_top(30)
        main_box.set_margin_bottom(30)

        # Add title
        self.add_title(main_box)

        # Add version information
        self.add_version_info(main_box)

        # Add update instructions
        self.add_instructions(main_box)

        # Add buttons
        self.add_buttons(main_box)

        self.window.add(main_box)
        self.window.connect("destroy", self.on_window_destroy)
        print("Showing dialog window...")
        self.window.show_all()
        print("Dialog window should now be visible")

    def create_lock_file(self):
        """Create lock file with current PID"""
        try:
            with open(self.lock_file, 'w') as f:
                f.write(str(os.getpid()))
        except Exception as e:
            print(f"Warning: Could not create lock file: {e}")

    def remove_lock_file(self):
        """Remove lock file"""
        try:
            if os.path.exists(self.lock_file):
                os.remove(self.lock_file)
        except Exception as e:
            print(f"Warning: Could not remove lock file: {e}")

    def add_title(self, container):
        """Add main title"""
        title_label = Gtk.Label()
        title_label.set_markup('<span size="24000" weight="bold">‚óÜ Update Available ‚óÜ</span>')
        title_label.set_halign(Gtk.Align.CENTER)
        title_label.set_margin_bottom(10)
        container.pack_start(title_label, False, False, 0)

    def add_version_info(self, container):
        """Add version comparison information"""
        # Create version info box
        version_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        version_box.set_halign(Gtk.Align.CENTER)

        # Current version
        current_label = Gtk.Label()
        current_label.set_markup(f'<span size="14000">Current Version: <b>{self.local_version}</b></span>')
        current_label.set_halign(Gtk.Align.CENTER)
        version_box.pack_start(current_label, False, False, 0)

        # Arrow
        arrow_label = Gtk.Label()
        arrow_label.set_markup('<span size="16000">‚Üí</span>')
        arrow_label.set_halign(Gtk.Align.CENTER)
        version_box.pack_start(arrow_label, False, False, 0)

        # Available version
        available_label = Gtk.Label()
        available_label.set_markup(f'<span size="14000" foreground="#89b4fa">Available Version: <b>{self.remote_version}</b></span>')
        available_label.set_halign(Gtk.Align.CENTER)
        version_box.pack_start(available_label, False, False, 0)

        container.pack_start(version_box, False, False, 0)

    def add_instructions(self, container):
        """Add update instructions"""
        # Create non-scrollable instructions label
        instructions_label = Gtk.Label()
        instructions_text = f"""A newer version of ArchRiot ({self.remote_version}) is available!

The update process will:

‚Ä¢ Download the latest ArchRiot setup script
‚Ä¢ Backup your current configuration
‚Ä¢ Update system files and scripts
‚Ä¢ Preserve your personal settings

Choose an option below to proceed."""

        instructions_label.set_text(instructions_text)
        instructions_label.set_line_wrap(True)
        instructions_label.set_line_wrap_mode(Pango.WrapMode.WORD)
        instructions_label.set_halign(Gtk.Align.CENTER)
        instructions_label.set_valign(Gtk.Align.CENTER)
        instructions_label.set_justify(Gtk.Justification.CENTER)
        instructions_label.set_margin_start(20)
        instructions_label.set_margin_end(20)
        instructions_label.set_margin_top(15)
        instructions_label.set_margin_bottom(15)

        # Set font to match welcome window
        font_desc = Pango.FontDescription()
        font_desc.set_family("Hack Nerd Font Mono")
        font_desc.set_size(13 * Pango.SCALE)
        instructions_label.override_font(font_desc)

        container.pack_start(instructions_label, True, True, 0)

    def add_buttons(self, container):
        """Add action buttons"""
        # Create button box
        button_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=15)
        button_box.set_halign(Gtk.Align.CENTER)
        button_box.set_margin_top(10)

        # Install button
        install_button = Gtk.Button(label="üì• Install")
        install_button.connect("clicked", self.on_install_clicked)
        install_button.set_size_request(120, 40)
        button_box.pack_start(install_button, False, False, 0)

        # Ignore Notifications button
        ignore_button = Gtk.Button(label="üîï Ignore Notifications")
        ignore_button.connect("clicked", self.on_ignore_clicked)
        ignore_button.set_size_request(160, 40)
        button_box.pack_start(ignore_button, False, False, 0)

        # Close button
        close_button = Gtk.Button(label="‚ùå Close")
        close_button.connect("clicked", self.on_close_clicked)
        close_button.set_size_request(100, 40)
        button_box.pack_start(close_button, False, False, 0)

        container.pack_start(button_box, False, False, 0)

    def on_install_clicked(self, button):
        """Handle install button click - open terminal and run update command"""
        try:
            # Create the update command
            update_command = "curl https://ArchRiot.org/setup.sh | bash"

            # Use hyprctl dispatch to launch terminal EXACTLY like SUPER+SHIFT+ENTER
            # Change to home directory first to avoid getcwd errors
            terminal_cmd = f"ghostty --class=com.mitchellh.ghostty-floating -e bash -c 'cd $HOME; echo \"Starting ArchRiot update...\"; {update_command}; echo \"Update complete. Press Enter to close.\"; read'"

            try:
                # Use hyprctl dispatch exec to launch exactly like SUPER+SHIFT+ENTER
                result = subprocess.run(['hyprctl', 'dispatch', 'exec', terminal_cmd],
                                      capture_output=True, text=True, timeout=10)

                if result.returncode == 0:
                    print("Successfully launched update terminal via hyprctl dispatch")
                else:
                    raise Exception(f"hyprctl dispatch failed: {result.stderr}")
            except Exception as e:
                raise Exception(f"Failed to launch terminal via hyprctl: {e}")

            # Keep dialog open briefly to show success
            print("Update terminal launched successfully")
            GLib.timeout_add_seconds(2, lambda: (self.remove_lock_file(), Gtk.main_quit()))

        except Exception as e:
            print(f"Error launching update: {e}")
            # Show error dialog but keep update dialog open
            error_dialog = Gtk.MessageDialog(
                parent=self.window,
                type=Gtk.MessageType.ERROR,
                buttons=Gtk.ButtonsType.OK,
                message_format="Failed to launch update terminal"
            )
            error_dialog.format_secondary_text(f"Error: {e}\n\nPlease manually run:\n{update_command}")
            error_dialog.run()
            error_dialog.destroy()
            # Don't close the main dialog, let user try again or close manually

    def on_ignore_clicked(self, button):
        """Handle ignore button click - disable future notifications"""
        try:
            # Load current config
            config = self.load_config()

            # Set ignore flag
            config['ignore_notifications'] = True
            config['ignored_at'] = GLib.get_real_time()

            # Save config
            self.save_config(config)

            # Show confirmation
            dialog = Gtk.MessageDialog(
                parent=self.window,
                type=Gtk.MessageType.INFO,
                buttons=Gtk.ButtonsType.OK,
                message_format="Notifications Disabled"
            )
            dialog.format_secondary_text("Future update notifications have been disabled.\n\nYou can re-enable them by running:\nversion-check --reset")
            dialog.run()
            dialog.destroy()

            # Close the update dialog
            self.remove_lock_file()
            Gtk.main_quit()

        except Exception as e:
            print(f"Error saving ignore setting: {e}")

    def on_close_clicked(self, button):
        """Handle close button click - just close the dialog"""
        self.remove_lock_file()
        Gtk.main_quit()

    def load_config(self):
        """Load version check configuration"""
        default_config = {
            "ignore_notifications": False,
            "last_check": None,
            "last_notified_version": None,
            "check_interval_hours": 4
        }

        if not os.path.exists(self.config_file):
            return default_config

        try:
            with open(self.config_file, 'r') as f:
                config = json.load(f)
                # Merge with defaults
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                return config
        except Exception:
            return default_config

    def save_config(self, config):
        """Save version check configuration"""
        try:
            os.makedirs(self.config_dir, exist_ok=True)
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
        except Exception as e:
            print(f"Error saving config: {e}")

    def on_window_destroy(self, widget):
        """Handle window destruction"""
        self.remove_lock_file()
        Gtk.main_quit()

def main():
    """Main entry point"""
    print("Starting version-update-dialog...")

    # Verify we have version information
    local_version = os.environ.get('ARCHRIOT_LOCAL_VERSION')
    remote_version = os.environ.get('ARCHRIOT_REMOTE_VERSION')

    print(f"Local version: {local_version}")
    print(f"Remote version: {remote_version}")

    if not local_version or not remote_version:
        print("Error: Version information not provided")
        print("This script should be called by version-check with environment variables:")
        print("ARCHRIOT_LOCAL_VERSION and ARCHRIOT_REMOTE_VERSION")
        sys.exit(1)

    # Set up CSS for styling (same as welcome window)
    css_provider = Gtk.CssProvider()
    css_data = """
    * {
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    window {
        background: rgba(0, 0, 0, 0.7);
        color: #cdd6f4;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    label {
        color: #cdd6f4;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    textview {
        background: rgba(0, 0, 0, 0.7);
        color: #cdd6f4;
        border: none;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    textview text {
        background: rgba(0, 0, 0, 0.7);
        color: #cdd6f4;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    button {
        background: rgba(75, 0, 130, 1.0);
        color: #ffffff;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-weight: bold;
        font-family: "Hack Nerd Font Mono", "Hack Nerd Font", monospace;
    }

    button:hover {
        background: rgba(102, 51, 153, 1.0);
    }

    scrolledwindow {
        border: none;
        background: rgba(0, 0, 0, 0.7);
    }
    """

    css_provider.load_from_data(css_data.encode())

    # Apply CSS to default screen
    screen = Gdk.Screen.get_default()
    Gtk.StyleContext.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    # Create and show the dialog
    print("Creating UpdateDialog window...")
    dialog = UpdateDialog()
    print("Dialog created, starting main loop...")

    # Run the main loop
    Gtk.main()
    print("Dialog closed.")

if __name__ == "__main__":
    main()
