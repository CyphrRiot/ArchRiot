#!/bin/bash

# OhmArchy Memory Profiler
# Detailed memory usage analysis and optimization recommendations

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
REPORT_FILE="/tmp/ohmarchy-memory-$(date +%Y%m%d-%H%M%S).txt"
TOP_PROCESSES=15
MEMORY_WARNING_THRESHOLD=80
MEMORY_CRITICAL_THRESHOLD=90

print_header() {
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë                OhmArchy Memory Profiler                     ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${CYAN}üß† Analyzing memory usage patterns and identifying optimization opportunities${NC}"
    echo -e "${CYAN}üìÑ Report will be saved to: $REPORT_FILE${NC}"
    echo ""
}

log_to_file() {
    echo "$1" | tee -a "$REPORT_FILE"
}

section_header() {
    local title="$1"
    echo "" | tee -a "$REPORT_FILE"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}" | tee -a "$REPORT_FILE"
    echo -e "${BLUE} $title${NC}" | tee -a "$REPORT_FILE"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
}

subsection_header() {
    local title="$1"
    echo "" | tee -a "$REPORT_FILE"
    echo -e "${YELLOW}‚îÄ‚îÄ‚îÄ‚îÄ $title ‚îÄ‚îÄ‚îÄ‚îÄ${NC}" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
}

analyze_system_memory() {
    section_header "üìä SYSTEM MEMORY OVERVIEW"

    subsection_header "Memory Statistics"
    free -h | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"

    # Calculate memory usage percentage
    local mem_total=$(free | awk 'NR==2{print $2}')
    local mem_used=$(free | awk 'NR==2{print $3}')
    local mem_available=$(free | awk 'NR==2{print $7}')
    local mem_percent=$(echo "scale=1; $mem_used * 100 / $mem_total" | bc)
    local mem_available_percent=$(echo "scale=1; $mem_available * 100 / $mem_total" | bc)

    echo "Memory Usage: ${mem_percent}%" | tee -a "$REPORT_FILE"
    echo "Available Memory: ${mem_available_percent}%" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"

    # Memory status assessment
    if (( $(echo "$mem_percent > $MEMORY_CRITICAL_THRESHOLD" | bc -l) )); then
        echo -e "${RED}üî¥ CRITICAL: Memory usage is very high (${mem_percent}%)${NC}" | tee -a "$REPORT_FILE"
    elif (( $(echo "$mem_percent > $MEMORY_WARNING_THRESHOLD" | bc -l) )); then
        echo -e "${YELLOW}üü° WARNING: Memory usage is high (${mem_percent}%)${NC}" | tee -a "$REPORT_FILE"
    else
        echo -e "${GREEN}‚úÖ GOOD: Memory usage is normal (${mem_percent}%)${NC}" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Swap Usage"
    local swap_total=$(free | awk 'NR==3{print $2}')
    if [[ $swap_total -gt 0 ]]; then
        local swap_used=$(free | awk 'NR==3{print $3}')
        local swap_percent=$(echo "scale=1; $swap_used * 100 / $swap_total" | bc 2>/dev/null || echo "0")
        echo "Swap Usage: ${swap_percent}%" | tee -a "$REPORT_FILE"

        if (( $(echo "$swap_percent > 50" | bc -l 2>/dev/null || echo 0) )); then
            echo -e "${YELLOW}‚ö† High swap usage detected - consider adding more RAM${NC}" | tee -a "$REPORT_FILE"
        fi
    else
        echo "No swap configured" | tee -a "$REPORT_FILE"
    fi
}

analyze_process_memory() {
    section_header "üîç PROCESS MEMORY ANALYSIS"

    subsection_header "Top Memory Consumers"
    echo "Rank | Process | Memory | CPU | PID | Command" | tee -a "$REPORT_FILE"
    echo "-----|---------|--------|-----|-----|--------" | tee -a "$REPORT_FILE"

    local rank=1
    ps aux --sort=-%mem | head -$(($TOP_PROCESSES + 1)) | tail -$TOP_PROCESSES | while read line; do
        local user=$(echo "$line" | awk '{print $1}')
        local pid=$(echo "$line" | awk '{print $2}')
        local cpu=$(echo "$line" | awk '{print $3}')
        local mem=$(echo "$line" | awk '{print $4}')
        local command=$(echo "$line" | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}' | cut -c1-50)

        printf "%4d | %-7s | %6s%% | %4s%% | %5s | %s\n" "$rank" "$(echo "$command" | awk '{print $1}' | xargs basename)" "$mem" "$cpu" "$pid" "$command" | tee -a "$REPORT_FILE"
        ((rank++))
    done

    subsection_header "OhmArchy-Specific Processes"
    echo "Process | Memory | CPU | PID | Status" | tee -a "$REPORT_FILE"
    echo "--------|--------|-----|-----|-------" | tee -a "$REPORT_FILE"

    for process in waybar hyprland hypridle hyprlock mako ghostty swaybg fuzzel; do
        local proc_info=$(ps aux | grep "$process" | grep -v grep | head -1)
        if [[ -n "$proc_info" ]]; then
            local mem=$(echo "$proc_info" | awk '{print $4}')
            local cpu=$(echo "$proc_info" | awk '{print $3}')
            local pid=$(echo "$proc_info" | awk '{print $2}')
            printf "%-7s | %6s%% | %4s%% | %5s | Running\n" "$process" "$mem" "$cpu" "$pid" | tee -a "$REPORT_FILE"
        else
            printf "%-7s | %6s | %4s | %5s | Not Running\n" "$process" "N/A" "N/A" "N/A" | tee -a "$REPORT_FILE"
        fi
    done
}

analyze_memory_by_category() {
    section_header "üìà MEMORY USAGE BY CATEGORY"

    subsection_header "System Services"
    local system_mem=0
    echo "Service Memory Usage:" | tee -a "$REPORT_FILE"
    for service in systemd NetworkManager dbus pulseaudio; do
        local mem=$(ps aux | grep "$service" | grep -v grep | awk '{sum+=$4} END {printf "%.1f", sum}')
        if [[ -n "$mem" && "$mem" != "0.0" ]]; then
            echo "  $service: ${mem}%" | tee -a "$REPORT_FILE"
            system_mem=$(echo "$system_mem + $mem" | bc 2>/dev/null || echo "$system_mem")
        fi
    done
    echo "Total System Services: ${system_mem}%" | tee -a "$REPORT_FILE"

    subsection_header "Desktop Environment"
    local desktop_mem=0
    echo "Desktop Environment Memory Usage:" | tee -a "$REPORT_FILE"
    for de_proc in hyprland waybar mako hypridle hyprlock; do
        local mem=$(ps aux | grep "$de_proc" | grep -v grep | awk '{sum+=$4} END {printf "%.1f", sum}')
        if [[ -n "$mem" && "$mem" != "0.0" ]]; then
            echo "  $de_proc: ${mem}%" | tee -a "$REPORT_FILE"
            desktop_mem=$(echo "$desktop_mem + $mem" | bc 2>/dev/null || echo "$desktop_mem")
        fi
    done
    echo "Total Desktop Environment: ${desktop_mem}%" | tee -a "$REPORT_FILE"

    subsection_header "Applications"
    local app_mem=0
    echo "Application Memory Usage:" | tee -a "$REPORT_FILE"
    for app in firefox chromium code zed ghostty; do
        local mem=$(ps aux | grep "$app" | grep -v grep | awk '{sum+=$4} END {printf "%.1f", sum}')
        if [[ -n "$mem" && "$mem" != "0.0" ]]; then
            echo "  $app: ${mem}%" | tee -a "$REPORT_FILE"
            app_mem=$(echo "$app_mem + $mem" | bc 2>/dev/null || echo "$app_mem")
        fi
    done
    echo "Total Applications: ${app_mem}%" | tee -a "$REPORT_FILE"
}

analyze_memory_trends() {
    section_header "üìâ MEMORY TRENDS ANALYSIS"

    subsection_header "Memory Usage Over Time (5 samples)"
    echo "Sampling memory usage every 2 seconds..." | tee -a "$REPORT_FILE"
    echo "Sample | Used Memory | Available | Timestamp" | tee -a "$REPORT_FILE"
    echo "-------|-------------|-----------|----------" | tee -a "$REPORT_FILE"

    for i in {1..5}; do
        local mem_used=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
        local mem_avail=$(free | awk 'NR==2{printf "%.1f", $7*100/$2}')
        local timestamp=$(date '+%H:%M:%S')
        printf "%6d | %10s%% | %8s%% | %s\n" "$i" "$mem_used" "$mem_avail" "$timestamp" | tee -a "$REPORT_FILE"

        if [[ $i -lt 5 ]]; then
            sleep 2
        fi
    done

    subsection_header "Memory Fragmentation Analysis"
    if [[ -r /proc/buddyinfo ]]; then
        echo "Memory fragmentation status:" | tee -a "$REPORT_FILE"
        cat /proc/buddyinfo | tee -a "$REPORT_FILE"
    else
        echo "Memory fragmentation data not accessible" | tee -a "$REPORT_FILE"
    fi
}

analyze_memory_leaks() {
    section_header "üîç MEMORY LEAK DETECTION"

    subsection_header "Long-Running Processes"
    echo "Processes running for more than 1 hour:" | tee -a "$REPORT_FILE"
    echo "Process | Memory | Runtime | PID" | tee -a "$REPORT_FILE"
    echo "--------|--------|---------|----" | tee -a "$REPORT_FILE"

    ps -eo pid,etime,pmem,comm --sort=-pmem | awk 'NR>1 && $2 ~ /:/ {
        split($2, time, ":");
        if (length(time) >= 3 || (length(time) == 2 && time[1] >= 60)) {
            printf "%-7s | %6s%% | %7s | %s\n", $4, $3, $2, $1
        }
    }' | head -10 | tee -a "$REPORT_FILE"

    subsection_header "Growing Processes Check"
    echo "Note: This requires multiple runs to detect growth patterns" | tee -a "$REPORT_FILE"
    echo "Current memory snapshot saved for future comparison" | tee -a "$REPORT_FILE"

    # Save current state for future comparison
    local snapshot_file="$HOME/.cache/ohmarchy-memory-snapshot"
    ps -eo pid,pmem,comm --sort=-pmem > "$snapshot_file.$(date +%s)"

    # Clean old snapshots (keep last 5)
    find "$HOME/.cache" -name "ohmarchy-memory-snapshot.*" -type f | sort | head -n -5 | xargs rm -f 2>/dev/null || true
}

generate_optimization_recommendations() {
    section_header "üí° MEMORY OPTIMIZATION RECOMMENDATIONS"

    local mem_usage=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')

    subsection_header "Immediate Actions"

    if (( $(echo "$mem_usage > $MEMORY_CRITICAL_THRESHOLD" | bc -l) )); then
        echo "üî¥ CRITICAL MEMORY USAGE ($mem_usage%) - IMMEDIATE ACTION REQUIRED:" | tee -a "$REPORT_FILE"
        echo "1. Close unnecessary applications immediately" | tee -a "$REPORT_FILE"
        echo "2. Restart memory-heavy processes (browsers, editors)" | tee -a "$REPORT_FILE"
        echo "3. Clear system caches: sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'" | tee -a "$REPORT_FILE"
        echo "4. Consider rebooting the system" | tee -a "$REPORT_FILE"
    elif (( $(echo "$mem_usage > $MEMORY_WARNING_THRESHOLD" | bc -l) )); then
        echo "üü° HIGH MEMORY USAGE ($mem_usage%) - RECOMMENDED ACTIONS:" | tee -a "$REPORT_FILE"
        echo "1. Close unused browser tabs and applications" | tee -a "$REPORT_FILE"
        echo "2. Restart waybar and other desktop services" | tee -a "$REPORT_FILE"
        echo "3. Clear application caches" | tee -a "$REPORT_FILE"
        echo "4. Monitor for memory leaks" | tee -a "$REPORT_FILE"
    else
        echo "‚úÖ GOOD MEMORY USAGE ($mem_usage%) - OPTIMIZATION SUGGESTIONS:" | tee -a "$REPORT_FILE"
        echo "1. Regular cache cleanup to maintain performance" | tee -a "$REPORT_FILE"
        echo "2. Monitor growing processes periodically" | tee -a "$REPORT_FILE"
        echo "3. Consider enabling zram if not already active" | tee -a "$REPORT_FILE"
    fi

    subsection_header "Long-term Optimizations"
    echo "1. Enable zram compression:" | tee -a "$REPORT_FILE"
    echo "   sudo pacman -S zram-generator" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "2. Optimize browser memory usage:" | tee -a "$REPORT_FILE"
    echo "   - Use browser extensions to suspend unused tabs" | tee -a "$REPORT_FILE"
    echo "   - Configure lower cache limits" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "3. Optimize Waybar modules:" | tee -a "$REPORT_FILE"
    echo "   - Increase update intervals for system monitors" | tee -a "$REPORT_FILE"
    echo "   - Disable unnecessary modules" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "4. Consider hardware upgrade if consistently high usage" | tee -a "$REPORT_FILE"

    subsection_header "Automated Commands"
    echo "# Clear caches and optimize memory:" | tee -a "$REPORT_FILE"
    echo "ohmarchy-optimize-system" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# Emergency memory cleanup:" | tee -a "$REPORT_FILE"
    echo "sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'" | tee -a "$REPORT_FILE"
    echo "systemctl --user restart waybar mako" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
    echo "# Monitor memory continuously:" | tee -a "$REPORT_FILE"
    echo "watch -n 5 'free -h && echo && ps aux --sort=-%mem | head -10'" | tee -a "$REPORT_FILE"
}

show_summary() {
    section_header "üìã ANALYSIS SUMMARY"

    local mem_usage=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
    local mem_total=$(free -h | awk 'NR==2{print $2}')
    local mem_used=$(free -h | awk 'NR==2{print $3}')
    local mem_available=$(free -h | awk 'NR==2{print $7}')

    echo "System Memory Status:" | tee -a "$REPORT_FILE"
    echo "  Total: $mem_total" | tee -a "$REPORT_FILE"
    echo "  Used: $mem_used (${mem_usage}%)" | tee -a "$REPORT_FILE"
    echo "  Available: $mem_available" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"

    echo "Top 3 Memory Consumers:" | tee -a "$REPORT_FILE"
    ps aux --sort=-%mem | head -4 | tail -3 | awk '{printf "  %s: %.1f%%\n", $11, $4}' | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"

    echo -e "${GREEN}‚úÖ Memory analysis completed successfully!${NC}" | tee -a "$REPORT_FILE"
    echo -e "${GREEN}üìÑ Full report saved to: $REPORT_FILE${NC}" | tee -a "$REPORT_FILE"
    echo "" | tee -a "$REPORT_FILE"
}

main() {
    print_header

    # Initialize report file
    echo "OhmArchy Memory Profiler Report" > "$REPORT_FILE"
    echo "Generated: $(date)" >> "$REPORT_FILE"
    echo "System: $(uname -a)" >> "$REPORT_FILE"
    echo "Memory: $(free -h | awk 'NR==2{print $2}')" >> "$REPORT_FILE"

    # Check dependencies
    if ! command -v bc >/dev/null 2>&1; then
        echo -e "${YELLOW}Installing bc for calculations...${NC}"
        sudo pacman -S --noconfirm bc 2>/dev/null || echo "Could not install bc"
    fi

    # Run analysis
    analyze_system_memory
    analyze_process_memory
    analyze_memory_by_category
    analyze_memory_trends
    analyze_memory_leaks
    generate_optimization_recommendations
    show_summary
}

main "$@"
