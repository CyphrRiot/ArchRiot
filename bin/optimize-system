#!/bin/bash

# ArchRiot System Optimization Script
# Applies performance improvements and cleanup operations

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Optimization flags
DRY_RUN=false
VERBOSE=false
BACKUP_ENABLED=true

print_header() {
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                 ArchRiot System Optimization                 ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}⚡ Applying performance optimizations and system cleanup${NC}"
    echo ""
}

log_action() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%H:%M:%S')

    case "$level" in
        "INFO")  echo -e "${CYAN}[$timestamp] ℹ️  $message${NC}" ;;
        "WARN")  echo -e "${YELLOW}[$timestamp] ⚠️  $message${NC}" ;;
        "ERROR") echo -e "${RED}[$timestamp] ❌ $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}[$timestamp] ✅ $message${NC}" ;;
        "ACTION") echo -e "${BLUE}[$timestamp] 🔧 $message${NC}" ;;
    esac
}

execute_command() {
    local description="$1"
    local command="$2"
    local optional="${3:-false}"

    log_action "ACTION" "$description"

    if [[ "$DRY_RUN" == "true" ]]; then
        echo "  [DRY RUN] Would execute: $command"
        return 0
    fi

    if [[ "$VERBOSE" == "true" ]]; then
        echo "  Executing: $command"
    fi

    if eval "$command" 2>/dev/null; then
        log_action "SUCCESS" "$description completed"
        return 0
    elif [[ "$optional" == "true" ]]; then
        log_action "WARN" "$description failed (non-critical)"
        return 0
    else
        log_action "ERROR" "$description failed"
        return 1
    fi
}

create_backup() {
    local file="$1"
    local backup_dir="$HOME/.config/omarchy/backups/$(date +%Y%m%d)"

    if [[ "$BACKUP_ENABLED" == "true" && -f "$file" ]]; then
        mkdir -p "$backup_dir"
        cp "$file" "$backup_dir/$(basename "$file").backup" 2>/dev/null || true
    fi
}

optimize_package_cache() {
    echo -e "${BLUE}📦 Package Cache Optimization${NC}"
    echo ""

    # Clean pacman cache
    if command -v pacman >/dev/null 2>&1; then
        execute_command "Cleaning pacman package cache" "sudo pacman -Sc --noconfirm"

        # Remove orphaned packages
        local orphans=$(pacman -Qdtq 2>/dev/null | wc -l)
        if [[ $orphans -gt 0 ]]; then
            execute_command "Removing $orphans orphaned packages" "sudo pacman -Rns \$(pacman -Qdtq) --noconfirm"
        else
            log_action "INFO" "No orphaned packages found"
        fi
    fi

    # Clean AUR cache
    if command -v yay >/dev/null 2>&1; then
        execute_command "Cleaning AUR cache" "yay -Sc --noconfirm" true
    fi

    echo ""
}

optimize_user_cache() {
    echo -e "${BLUE}🗂️  User Cache Optimization${NC}"
    echo ""

    # Clear thumbnail cache
    if [[ -d "$HOME/.cache/thumbnails" ]]; then
        local thumb_size=$(du -sm "$HOME/.cache/thumbnails" 2>/dev/null | cut -f1)
        if [[ $thumb_size -gt 50 ]]; then
            execute_command "Clearing thumbnail cache (${thumb_size}MB)" "rm -rf ~/.cache/thumbnails/*"
        fi
    fi

    # Clear font cache
    execute_command "Clearing font cache" "rm -rf ~/.cache/fontconfig/*" true

    # Clear icon cache
    execute_command "Clearing icon cache" "rm -rf ~/.cache/icon-theme.cache" true

    # Clear GTK cache
    execute_command "Clearing GTK cache" "rm -rf ~/.cache/gdk-pixbuf-*" true

    # Clear browser caches (optional)
    for browser_cache in ~/.cache/google-chrome ~/.cache/chromium ~/.cache/mozilla; do
        if [[ -d "$browser_cache" ]]; then
            local cache_size=$(du -sm "$browser_cache" 2>/dev/null | cut -f1)
            if [[ $cache_size -gt 200 ]]; then
                execute_command "Clearing browser cache: $(basename "$browser_cache") (${cache_size}MB)" "rm -rf $browser_cache/Default/Cache $browser_cache/*/Cache" true
            fi
        fi
    done

    echo ""
}

optimize_font_system() {
    echo -e "${BLUE}🔤 Font System Optimization${NC}"
    echo ""

    # Rebuild font cache
    execute_command "Rebuilding font cache" "fc-cache -fv"

    # Update font configuration
    execute_command "Updating font configuration" "sudo fc-cache -fv" true

    echo ""
}

optimize_desktop_database() {
    echo -e "${BLUE}🖥️  Desktop Database Optimization${NC}"
    echo ""

    # Update desktop database
    execute_command "Updating desktop database" "update-desktop-database ~/.local/share/applications/"

    # Update MIME database
    execute_command "Updating MIME database" "update-mime-database ~/.local/share/mime/" true

    # Update icon cache
    for icon_dir in ~/.local/share/icons/* /usr/share/icons/*; do
        if [[ -d "$icon_dir" ]]; then
            execute_command "Updating icon cache: $(basename "$icon_dir")" "gtk-update-icon-cache -t '$icon_dir'" true
        fi
    done

    echo ""
}

optimize_systemd_services() {
    echo -e "${BLUE}⚙️  SystemD Service Optimization${NC}"
    echo ""

    # Check for failed services
    local failed_services=$(systemctl --failed --no-pager 2>/dev/null | grep -c "●" || echo "0")
    if [[ $failed_services -gt 0 ]]; then
        log_action "WARN" "$failed_services failed services detected - manual investigation recommended"
        systemctl --failed --no-pager 2>/dev/null | head -10
    else
        log_action "SUCCESS" "No failed services found"
    fi

    # Restart user services that might benefit from restart
    for service in waybar mako; do
        if systemctl --user is-active "$service" >/dev/null 2>&1; then
            execute_command "Restarting $service service" "systemctl --user restart $service" true
        fi
    done

    echo ""
}

optimize_shell_configuration() {
    echo -e "${BLUE}🐚 Shell Configuration Optimization${NC}"
    echo ""

    # Check bash history size
    if [[ -f "$HOME/.bash_history" ]]; then
        local hist_lines=$(wc -l < "$HOME/.bash_history")
        if [[ $hist_lines -gt 5000 ]]; then
            create_backup "$HOME/.bash_history"
            execute_command "Trimming bash history ($hist_lines lines -> 2000)" "tail -2000 ~/.bash_history > ~/.bash_history.tmp && mv ~/.bash_history.tmp ~/.bash_history"
        fi
    fi

    # Clear fish history if too large
    if [[ -f "$HOME/.local/share/fish/fish_history" ]]; then
        local fish_hist_size=$(du -sm "$HOME/.local/share/fish/fish_history" 2>/dev/null | cut -f1)
        if [[ $fish_hist_size -gt 5 ]]; then
            create_backup "$HOME/.local/share/fish/fish_history"
            execute_command "Trimming fish history (${fish_hist_size}MB)" "tail -2000 ~/.local/share/fish/fish_history > ~/.local/share/fish/fish_history.tmp && mv ~/.local/share/fish/fish_history.tmp ~/.local/share/fish/fish_history"
        fi
    fi

    echo ""
}

optimize_temporary_files() {
    echo -e "${BLUE}🗑️  Temporary Files Cleanup${NC}"
    echo ""

    # Clear system temp files (with caution)
    execute_command "Clearing old temp files" "find /tmp -type f -atime +7 -delete" true

    # Clear user temp files
    if [[ -d "$HOME/.local/share/Trash" ]]; then
        local trash_size=$(du -sm "$HOME/.local/share/Trash" 2>/dev/null | cut -f1)
        if [[ $trash_size -gt 100 ]]; then
            execute_command "Emptying trash (${trash_size}MB)" "rm -rf ~/.local/share/Trash/*"
        fi
    fi

    # Clear old log files
    if [[ -d "$HOME/.local/share/xorg" ]]; then
        execute_command "Clearing old X11 logs" "find ~/.local/share/xorg -name '*.log*' -mtime +30 -delete" true
    fi

    echo ""
}

optimize_memory() {
    echo -e "${BLUE}🧠 Memory Optimization${NC}"
    echo ""

    # Check current memory usage
    local mem_usage=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
    log_action "INFO" "Current memory usage: ${mem_usage}%"

    # Drop caches if memory usage is high
    if (( $(echo "$mem_usage > 80" | bc -l 2>/dev/null || echo 0) )); then
        execute_command "Dropping system caches (high memory usage)" "sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'"
    fi

    # Check for memory-heavy processes
    log_action "INFO" "Top memory consumers:"
    ps aux --sort=-%mem | head -5 | awk '{print "  " $11 " - " $4 "%"}'

    echo ""
}

optimize_disk_space() {
    echo -e "${BLUE}💾 Disk Space Optimization${NC}"
    echo ""

    # Check disk usage
    local disk_usage=$(df / | awk 'NR==2{print $5}' | sed 's/%//')
    log_action "INFO" "Root filesystem usage: ${disk_usage}%"

    if [[ $disk_usage -gt 85 ]]; then
        log_action "WARN" "Disk usage is high - running additional cleanup"

        # Clear journal logs older than 2 weeks
        execute_command "Cleaning old journal logs" "sudo journalctl --vacuum-time=2weeks"

        # Clear more caches
        execute_command "Clearing additional caches" "sudo find /var/cache -type f -mtime +30 -delete" true
    fi

    echo ""
}

show_optimization_results() {
    echo -e "${GREEN}════════════════════════════════════════════════════════════════${NC}"
    echo -e "${GREEN} 🎉 OPTIMIZATION COMPLETE${NC}"
    echo -e "${GREEN}════════════════════════════════════════════════════════════════${NC}"
    echo ""

    # Show disk space saved
    log_action "SUCCESS" "System optimization completed successfully!"

    # Memory status
    local mem_usage=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
    log_action "INFO" "Current memory usage: ${mem_usage}%"

    # Disk status
    local disk_usage=$(df / | awk 'NR==2{print $5}')
    log_action "INFO" "Root filesystem usage: $disk_usage"

    echo ""
    echo -e "${CYAN}💡 Recommendations:${NC}"
    echo "  • Restart your session for full effect"
    echo "  • Run this optimization monthly for best performance"
    echo "  • Monitor system performance with: performance-analysis"
    echo ""

    if [[ "$BACKUP_ENABLED" == "true" ]]; then
        echo -e "${YELLOW}📋 Backups created in: ~/.config/omarchy/backups/$(date +%Y%m%d)${NC}"
        echo ""
    fi
}

show_help() {
    echo "ArchRiot System Optimization Script"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -d, --dry-run     Show what would be done without executing"
    echo "  -v, --verbose     Show detailed command output"
    echo "  -n, --no-backup   Skip creating backups"
    echo "  -h, --help        Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                Run full optimization"
    echo "  $0 --dry-run      Preview optimization actions"
    echo "  $0 --verbose      Run with detailed output"
    echo ""
}

main() {
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d|--dry-run)
                DRY_RUN=true
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -n|--no-backup)
                BACKUP_ENABLED=false
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done

    print_header

    if [[ "$DRY_RUN" == "true" ]]; then
        log_action "INFO" "DRY RUN MODE - No changes will be made"
        echo ""
    fi

    # Check if bc is available for calculations
    if ! command -v bc >/dev/null 2>&1; then
        log_action "WARN" "Installing bc for calculations..."
        sudo pacman -S --noconfirm bc 2>/dev/null || true
    fi

    # Run optimizations
    optimize_package_cache
    optimize_user_cache
    optimize_font_system
    optimize_desktop_database
    optimize_systemd_services
    optimize_shell_configuration
    optimize_temporary_files
    optimize_memory
    optimize_disk_space

    show_optimization_results
}

# Check for required permissions
if [[ $EUID -eq 0 ]]; then
    echo "Error: This script should not be run as root"
    echo "Some operations will use sudo when needed"
    exit 1
fi

main "$@"
