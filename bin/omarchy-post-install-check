#!/bin/bash

# =============================================================================
# OhmArchy Post-Installation Check
# Quick verification script for users to run after installation
# =============================================================================

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Status counters
CHECKS_PASSED=0
CHECKS_FAILED=0
CHECKS_WARNING=0

# Helper functions
print_header() {
    echo -e "\n${CYAN}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}═══════════════════════════════════════════════════════════════${NC}"
}

check_pass() {
    echo -e "${GREEN}✓${NC} $1"
    ((CHECKS_PASSED++))
}

check_fail() {
    echo -e "${RED}✗${NC} $1"
    ((CHECKS_FAILED++))
}

check_warn() {
    echo -e "${YELLOW}⚠${NC} $1"
    ((CHECKS_WARNING++))
}

check_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

# Main verification functions
verify_essential_components() {
    print_header "Essential Components"

    # Check Hyprland
    if command -v hyprland >/dev/null 2>&1; then
        check_pass "Hyprland window manager installed"
    else
        check_fail "Hyprland not found - core component missing"
    fi

    # Check Waybar
    if command -v waybar >/dev/null 2>&1; then
        check_pass "Waybar status bar installed"
    else
        check_fail "Waybar not found - essential for system monitoring"
    fi

    # Check essential applications
    local essential_apps=("kitty" "thunar" "firefox" "wofi")
    for app in "${essential_apps[@]}"; do
        if command -v "$app" >/dev/null 2>&1; then
            check_pass "$app installed"
        else
            check_warn "$app not found - may affect functionality"
        fi
    done
}

verify_theme_system() {
    print_header "Theme System"

    # Check theme directory structure
    if [[ -d ~/.config/omarchy ]]; then
        check_pass "OhmArchy config directory exists"
    else
        check_fail "OhmArchy config directory missing"
        return
    fi

    # Check current theme
    if [[ -L ~/.config/omarchy/current/theme ]]; then
        local theme_name=$(basename "$(readlink ~/.config/omarchy/current/theme)" 2>/dev/null)
        if [[ -n "$theme_name" ]]; then
            check_pass "Active theme: $theme_name"
        else
            check_fail "Theme link exists but is broken"
        fi
    else
        check_fail "No active theme configured"
    fi

    # Check background configuration
    if [[ -L ~/.config/omarchy/current/background ]]; then
        local bg_file=$(readlink ~/.config/omarchy/current/background 2>/dev/null)
        local bg_name=$(basename "$bg_file" 2>/dev/null)
        if [[ -f "$bg_file" ]]; then
            if [[ "$bg_name" == *"escape_velocity"* ]]; then
                check_pass "Background: $bg_name (correct default)"
            else
                check_warn "Background: $bg_name (not the expected default)"
            fi
        else
            check_fail "Background link points to missing file: $bg_file"
        fi
    else
        check_fail "No background configured"
    fi

    # Check theme switching
    if [[ -x ~/.local/bin/omarchy-theme-next ]]; then
        check_pass "Theme switching available (omarchy-theme-next)"
    else
        check_warn "Theme switching script not found"
    fi
}

verify_waybar_configuration() {
    print_header "Waybar Configuration"

    # Check waybar config files
    if [[ -f ~/.config/waybar/config ]]; then
        check_pass "Waybar configuration exists"
    else
        check_fail "Waybar configuration missing"
    fi

    if [[ -f ~/.config/waybar/style.css ]]; then
        check_pass "Waybar styling exists"

        # Check for common CSS issues
        if grep -q "!important" ~/.config/waybar/style.css; then
            check_warn "Waybar CSS contains !important (not recommended)"
        fi
    else
        check_fail "Waybar styling missing"
    fi

    # Check waybar scripts
    local waybar_scripts=(
        "waybar-tomato.py"
        "waybar-updates.py"
        "waybar-mullvad.py"
    )

    local script_count=0
    for script in "${waybar_scripts[@]}"; do
        if [[ -x ~/.local/bin/$script ]]; then
            ((script_count++))
        fi
    done

    if [[ $script_count -ge 3 ]]; then
        check_pass "Waybar scripts installed ($script_count found)"
    else
        check_warn "Some waybar scripts missing ($script_count/3 found)"
    fi

    # Check if waybar is running
    if pgrep waybar >/dev/null; then
        check_pass "Waybar is currently running"
    else
        check_info "Waybar not running (start with: waybar &)"
    fi
}

verify_multimedia_support() {
    print_header "Multimedia Support"

    # Check thumbnail support
    if command -v tumblerd >/dev/null 2>&1; then
        check_pass "Thumbnail service (tumbler) installed"
    else
        check_warn "Thumbnail service not found - file previews may not work"
    fi

    # Check PDF thumbnail status
    if [[ -f /usr/share/thumbnailers/evince.thumbnailer ]]; then
        check_warn "PDF thumbnails enabled (should show icons instead)"
    else
        check_pass "PDF thumbnails disabled (will show proper icons)"
    fi

    # Check media players
    local media_apps=("mpv" "vlc")
    local media_found=false
    for app in "${media_apps[@]}"; do
        if command -v "$app" >/dev/null 2>&1; then
            check_pass "Media player: $app"
            media_found=true
            break
        fi
    done

    if [[ "$media_found" == false ]]; then
        check_warn "No media players found (mpv/vlc recommended)"
    fi
}

verify_keyboard_shortcuts() {
    print_header "Keyboard Shortcuts & Scripts"

    # Check background cycling
    if [[ -x ~/.local/bin/swaybg-next ]]; then
        check_pass "Background cycling (Super+Ctrl+Space) available"

        # Check for symlink fix
        if grep -q "\-L" ~/.local/bin/swaybg-next 2>/dev/null; then
            check_pass "Background cycling includes symlink fix"
        else
            check_warn "Background cycling may have symlink issues"
        fi
    else
        check_fail "Background cycling script missing"
    fi

    # Check other essential scripts
    local key_scripts=(
        "omarchy-update"
        "migrate"
    )

    for script in "${key_scripts[@]}"; do
        if command -v "$script" >/dev/null 2>&1; then
            check_pass "$script command available"
        else
            check_warn "$script command not found"
        fi
    done
}

verify_fix_scripts() {
    print_header "Fix Scripts"

    local fix_scripts=(
        "omarchy-fix-background"
        "omarchy-fix-thunar-thumbnails"
        "omarchy-fix-waybar-theme"
    )

    for script in "${fix_scripts[@]}"; do
        if [[ -x ~/.local/share/omarchy/bin/$script ]]; then
            check_pass "$script available"
        else
            check_warn "$script not found"
        fi
    done

    check_info "Fix scripts can be run manually if issues occur"
}

verify_services() {
    print_header "Running Services"

    # Check background service
    if pgrep swaybg >/dev/null; then
        check_pass "Background service (swaybg) running"
    else
        check_info "Background service not running (will start with desktop)"
    fi

    # Check if in Hyprland session
    if [[ "$XDG_SESSION_DESKTOP" == "hyprland" ]] || pgrep hyprland >/dev/null; then
        check_pass "Running in Hyprland session"
    else
        check_info "Not in Hyprland session (reboot may be needed)"
    fi
}

show_usage_tips() {
    print_header "Usage Tips"

    echo -e "${BLUE}Essential Keyboard Shortcuts:${NC}"
    echo "  Super + Return          → Open terminal"
    echo "  Super + D               → Application launcher"
    echo "  Super + Ctrl + Space    → Cycle backgrounds"
    echo "  Super + Ctrl + Shift + Space → Switch themes"
    echo "  Super + Q               → Close window"
    echo "  Super + Arrow Keys      → Navigate windows"
    echo ""

    echo -e "${BLUE}Essential Commands:${NC}"
    echo "  omarchy-theme-next      → Switch to next theme"
    echo "  omarchy-update          → Update system"
    echo "  migrate                 → System migration tool"
    echo ""

    echo -e "${BLUE}Fix Commands (if needed):${NC}"
    echo "  omarchy-fix-background  → Fix background issues"
    echo "  omarchy-fix-thunar-thumbnails → Fix file thumbnails"
    echo "  omarchy-fix-waybar-theme → Fix waybar theming"
}

show_summary() {
    print_header "Installation Check Summary"

    local total_checks=$((CHECKS_PASSED + CHECKS_FAILED + CHECKS_WARNING))

    echo -e "Total checks: ${BLUE}$total_checks${NC}"
    echo -e "Passed: ${GREEN}$CHECKS_PASSED${NC}"
    echo -e "Failed: ${RED}$CHECKS_FAILED${NC}"
    echo -e "Warnings: ${YELLOW}$CHECKS_WARNING${NC}"

    echo ""

    if [[ $CHECKS_FAILED -eq 0 ]]; then
        if [[ $CHECKS_WARNING -eq 0 ]]; then
            echo -e "${GREEN}🎉 Perfect! Your OhmArchy installation is complete and fully functional.${NC}"
            echo -e "${GREEN}   You can start using your new system right away!${NC}"
        else
            echo -e "${YELLOW}✓ Good! Your OhmArchy installation is functional with minor issues.${NC}"
            echo -e "${YELLOW}  The warnings above are usually not critical.${NC}"
        fi
    else
        echo -e "${RED}⚠ Issues detected! Your installation has $CHECKS_FAILED critical problems.${NC}"
        echo -e "${RED}  Please address the failed checks above or run fix scripts.${NC}"
    fi

    echo ""
    echo -e "${BLUE}Next steps:${NC}"
    echo "  1. Reboot your system to ensure all settings take effect"
    echo "  2. Log into the Hyprland session"
    echo "  3. Explore themes with: omarchy-theme-next"
    echo "  4. Check out ~/.config/omarchy/ for customization"

    if [[ $CHECKS_FAILED -gt 0 ]]; then
        echo ""
        echo -e "${YELLOW}If you encounter issues:${NC}"
        echo "  • Run individual fix scripts from ~/.local/share/omarchy/bin/"
        echo "  • Check the documentation in the OhmArchy repository"
        echo "  • Restart services with: systemctl --user restart waybar"
    fi
}

# Main execution
main() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                 OhmArchy Post-Install Check                  ║"
    echo "║               Verifying Your Installation                    ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"

    echo "Check started: $(date)"
    echo "User: $(whoami)"
    echo "Session: ${XDG_SESSION_TYPE:-unknown}"
    echo ""

    # Run all verification functions
    verify_essential_components
    verify_theme_system
    verify_waybar_configuration
    verify_multimedia_support
    verify_keyboard_shortcuts
    verify_fix_scripts
    verify_services

    show_usage_tips
    show_summary

    echo ""
    echo "Check completed: $(date)"
}

# Execute main function
main "$@"
